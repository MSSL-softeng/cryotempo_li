window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "clev2er", "modulename": "clev2er", "kind": "module", "doc": "<h1 id=\"cryotempo-land-ice-l2-processor\">CryoTEMPO Land Ice L2 Processor</h1>\n\n<p>A python algorithm framework, available from <a href=\"https://github.com/MSSL-softeng/cryotempo_li\">https://github.com/MSSL-softeng/cryotempo_li</a> for\ndevelopment of the <strong>ESA CryoTEMPO Land Ice L2 processor</strong>.</p>\n\n<p>The framework is designed for (but not\nrestricted to) Level-1b to Level-2 processing of ESA radar altimetry mission data. The key features\nof the framework are dynamically loaded algorithm classes (from XML or YML lists of algorithms)\nand in-built support for multi-processing and a consistent automated development and testing\nworkflow. There are many run-time options in the chain controller command line tool.</p>\n\n<p>The diagram below shows a simplified representation of the framework and its components.</p>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    L1b(L1b)--&gt;Alg1\n    Alg1--&gt;Alg2;\n    Alg2--&gt;Alg3;\n    Alg3--&gt;Alg4;\n    Alg4--&gt;AlgN;\n    AlgN--&gt;L2(L2)\n    S(Shared Dict)\n    S&lt;-.-&gt;Alg1 &amp; Alg3 &amp; Alg4 &amp; AlgN\n    S-.-&gt;Alg2\n</div></pre>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    C(Config)~~~L(Logs)~~~R{{Run Controller}}~~~LI(Alg List)-.-Ch(Chain)~~~Br(Breakpoints)\n</div></pre>\n\n<h2 id=\"main-features\">Main Features</h2>\n\n<ul>\n<li>Command line chain controller tool : src/clev2er/tools/run_chain.py</li>\n<li>input L1b file selection (single file, multiple files or dynamic algorithm selection)</li>\n<li>dynamic algorithm loading from XML or YML list(s)\n<ul>\n<li>algorithms are classes of type Algorithm with configurable .init(), .process(), .finalize()\nfunctions.</li>\n<li>Algorithm.init() is called before any L1b file processing.</li>\n<li>Algorithm.process() is called on every L1b file,</li>\n<li>Algorithm.finalize() is called after all files have been processed.</li>\n<li>Each algorithm has access to: L1b Dataset, shared working dict, config dict.</li>\n<li>Algorithm/chain configuration by XML or YAML configuration files.</li>\n<li>A shared python dictionary is used to pass algorithm outputs between algorithms in the chain.</li>\n</ul></li>\n<li>logging with standard warning, info, debug, error levels (+ multi-processing logging support)</li>\n<li>optional multi-processing built in, configurable maximum number of processes used.</li>\n<li>optional use of shared memory (for example for large DEMs and Masks) when using multi-processing.\nThis is an optional experimental feature that must be used with great care as it can result in\nmemory leaks (requiring a server reboot to free) if shared memory is not correctly closed.</li>\n<li>algorithm timing (with MP support)</li>\n<li>chain timing</li>\n<li>support for breakpoint files (saved as NetCDF4 files)</li>\n</ul>\n\n<h2 id=\"change-log\">Change Log</h2>\n\n<p>This section details major changes to the framework (not individual chains):</p>\n\n<table>\n<thead>\n<tr>\n  <th>Date</th>\n  <th>Change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>15-Nov-23</td>\n  <td>config file directory structure changed to config/chain_configs/<em>chainname</em>/</td>\n</tr>\n<tr>\n  <td>15-Nov-23</td>\n  <td>algorithm_lists file directory structure changed to now add directory /<em>chainname</em>/</td>\n</tr>\n<tr>\n  <td>10-Nov-23</td>\n  <td>breakpoint support added. See section on breakpoints below.</td>\n</tr>\n<tr>\n  <td>May-Sep-24</td>\n  <td>Development of Baseline-D evolution to the cryotempo chain</td>\n</tr>\n<tr>\n  <td>20-Dec-24</td>\n  <td>updated to use Python 3.12</td>\n</tr>\n<tr>\n  <td>28-Dec-24</td>\n  <td>new install process</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"installation-of-the-framework\">Installation of the Framework</h2>\n\n<p>Note that the framework installation has been tested on Linux and MacOS systems. Use on\nother operating systems is possible but may require additional install steps, and is not yet\ndirectly supported.</p>\n\n<p>Make sure you have <em>git</em> (v2+) installed on your target system.</p>\n\n<p>Clone the git public repository in to a suitable directory on your system.\nThis will create a directory called <strong>/cryotempo_li</strong> in your current directory.</p>\n\n<p>with https:\n<code>git clone https://github.com/MSSL-softeng/cryotempo_li.git</code></p>\n\n<p>or with ssh:\n<code>git clone git@github.com:MSSL-softeng/cryotempo_li.git</code></p>\n\n<p>or with the GitHub CLI:\n<code>gh repo clone MSSL-softeng/cryotempo_li</code></p>\n\n<h2 id=\"run-the-install-script\">Run the Install Script</h2>\n\n<p>The provided install script (for macos/linux) does the following:</p>\n\n<ul>\n<li>check for availability of python 3.12.</li>\n<li>if python 3.12 not available installs it within a local miniconda\nenvironment.</li>\n<li>installs <em>poetry</em> dependency manager</li>\n<li>Using poetry installs all package dependencies in to a local\nvirtual environment</li>\n<li>installs the <em>pre-commit</em> tool</li>\n<li>installs pre-commit packages</li>\n<li>creates <strong>ct_activate.sh</strong>, a script used to activate the CryoTEMPO\nvirtual environment and set environment variables.</li>\n</ul>\n\n<p>From the directory that you ran the git clone command, do the following:</p>\n\n<pre><code>cd cryotempo_li\n./install.sh\n</code></pre>\n\n<p><strong>Note</strong> that you may need to edit <strong>ct_activate.sh</strong> if the install\nscript reports that any paths pointed to by environment variables do not exist.</p>\n\n<h2 id=\"regular-setup-and-activation\">Regular Setup and Activation</h2>\n\n<p>Whenever you use the CryoTEMPO software you need to activate\nthe virtual environment and setup required environment variables\nwithin your current shell. The installation\nprocess creates a script to do this for you. Run this each time you\nstart a new shell.</p>\n\n<pre><code>cd cryotempo_li\nsource ./ct_activate.sh\n</code></pre>\n\n<h2 id=\"chain-controller\">Chain Controller</h2>\n\n<p>The framework's chain controller is a tool called <strong>run_chain.py</strong>.</p>\n\n<p>You can find all <strong>run_chain.py</strong>'s command line options using:</p>\n\n<pre><code>run_chain.py -h (or --help)\n</code></pre>\n\n<p>For further info, please see <code>clev2er.tools</code></p>\n\n<p><strong>Note</strong>: make sure you have activated the software (using <strong>source ct_activate.sh</strong>)\nprior to running run_chain.py.</p>\n\n<h2 id=\"run-a-basic-test-chain\">Run a basic test chain</h2>\n\n<p>The following command tests the  CLEV2ER\nframework (within which the CryoTEMPO chain runs) running a separate test\nchain which dynamically loads\n2 template algorithms and runs them on a set of CryoSat L1b files.\nThis should run without any errors.</p>\n\n<pre><code>run_chain.py -n testchain -d $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles\n</code></pre>\n\n<h2 id=\"examples-of-cryotempo-processing-of-cryosat-2-l1b-files\">Examples of CryoTEMPO processing of CryoSat-2 L1b files</h2>\n\n<p>Here are examples of running the main CryoTEMPO Baseline-D Land Ice\nchain.</p>\n\n<p>Process January 2020 using multi-processing mode, by using the\nfollowing command line options:</p>\n\n<ul>\n<li>-n cryotempo: selects the <strong>cryotempo</strong> chain</li>\n<li>-b D -v 1 : uses baseline D001 config files</li>\n<li>-y 2020 -m 1 : process all L1b files in Jan 2020</li>\n<li>-mp -np 20 : use multi-processing mode, and split over 20 processes. You can\nuse a higher or lower number of processes depending upon the number of cores\non your system and available memory. For operational monthly processing at MSSL\nwe use 200-400 processes for multi-processing on 128-core servers with 512GB RAM.</li>\n</ul>\n\n<pre><code>run_chain.py -n cryotempo -b D -v 1 -y 2020 -m 1 -mp -np 20\n</code></pre>\n\n<p>Process all of 2020 using multi-processing mode, by using the following\ncommand line options:</p>\n\n<pre><code>run_chain.py -n cryotempo -b D -v 1 -y 2020 -mp -np 20\n</code></pre>\n\n<p>It is recommended to run the above commands within a <strong>screen</strong> or <strong>tmux</strong> session or using\n<strong>nohup</strong> so that the process is not killed when your current terminal times out.</p>\n\n<pre><code>nohup run_chain.py -n cryotempo -b D -v 1 -y 2020 -mp -np 20 &gt; /tmp/output.log 2&gt;&amp;1\n</code></pre>\n\n<h2 id=\"chain-components-and-configuration\">Chain Components and Configuration</h2>\n\n<p>This section describes the location of the main chain components and chain\nconfiguration files.</p>\n\n<h3 id=\"algorithm-code\">Algorithm Code</h3>\n\n<p>Each algorithm in the chain is stored in a seperate Algorithm class file (alg_xxx.py) in\nthe src/clev2er/algorithms/cryotempo/ directory.</p>\n\n<p><code>clev2er.algorithms.cryotempo</code></p>\n\n<h2 id=\"developer-processes\">Developer Processes</h2>\n\n<p>This section details additional installation requirements for developers who will develop/adapt\nnew chains or algorithms.</p>\n\n<ul>\n<li><p>create a new git branch (replace xxx with your initials, and my_new_feature\nwith a suitable name)</p>\n\n<pre><code>git checkout -b xxx_my_new_feature\n</code></pre></li>\n<li><p>code your new feature and tests, committing regularly to your new branch</p>\n\n<pre><code>git commit -a -m \"commit message\"\n</code></pre></li>\n<li><p>push your branch to GitHub</p>\n\n<pre><code>git push\n</code></pre></li>\n<li><p>create a pull request on GitHub for your branch</p></li>\n<li><p>check that the GitHub actions tests show no errors in your pull request</p></li>\n<li><p>repeat the above steps until you are happy with the feature branch</p></li>\n<li><p>request a review on the GitHub pull request page</p></li>\n<li><p>if the review passes the feature will be merged in to the master branch</p></li>\n</ul>\n\n<h2 id=\"configuration\">Configuration</h2>\n\n<p>Chains can be configured using XML or YAML configuration files and optional command line\noptions in the following order of increasing precedence:</p>\n\n<ul>\n<li>main config file: $CLEV2ER_BASE_DIR/config/main_config.xml [Must be XML]</li>\n<li>chain specific config file:\n$CLEV2ER_BASE_DIR/config/chain_configs/*chain_name<em>/</em>chain_name*_<em>BVVV</em>.yml or .xml, where\nBVVV is the baseline character (A..Z) and version number (001,..)</li>\n<li>command line options</li>\n<li>command line additional config options using the --conf_opts</li>\n</ul>\n\n<p>The configurations are passed to\nthe chain's algorithms and finder classes, via a merged python dictionary, available\nto the Algorithm classes as self.config.</p>\n\n<h3 id=\"run-control-configuration\">Run Control Configuration</h3>\n\n<p>The default run control configuration file is <code>$CLEV2ER_BASE_DIR/config/main_config.xml</code></p>\n\n<p>This contains general default settings for the chain controller. Each of these can\nbe overridden by the relevant command line options.</p>\n\n<table>\n<thead>\n<tr>\n  <th>Setting</th>\n  <th>Options</th>\n  <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>use_multi_processing</td>\n  <td>true or false</td>\n  <td>if true multi-processing is used</td>\n</tr>\n<tr>\n  <td>max_processes_for_multiprocessing</td>\n  <td>int</td>\n  <td>max number of processes to use for multi-processing</td>\n</tr>\n<tr>\n  <td>use_shared_memory</td>\n  <td>true or false</td>\n  <td>if true allow use of shared memory. Experimental feature</td>\n</tr>\n<tr>\n  <td>stop_on_error</td>\n  <td>true or false</td>\n  <td>stop chain on first error found, or log error and skip</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"chain-specific-configuration\">Chain Specific Configuration</h3>\n\n<p>The default configuration for your chain's algorithms and finder classes should be placed in\nthe chain specific config file:</p>\n\n<p><code>$CLEV2ER_BASE_DIR/config/chain_configs/&lt;chain_name&gt;/&lt;chain_name&gt;_&lt;BVVV&gt;[.xml,or .yml]</code></p>\n\n<p>where B is the baseline (major version) character A..Z, and VVV is the zero padded minor\nversion number.</p>\n\n<p>Configuration files may be either XML(.xml) or YAML (.yml) format.</p>\n\n<h4 id=\"formatting-rules-for-chain-configuration-files\">Formatting Rules for Chain Configuration Files</h4>\n\n<p>YAML or XML files can contain multi-level settings for key value pairs of boolean,\nint, float or str.</p>\n\n<ul>\n<li>boolean values must be set to the string <strong>true</strong> or <strong>false</strong> (case insensitive)</li>\n<li>environment variables are allowed within strings as $ENV_NAME or ${ENV_NAME} (and will be\nevaluated)</li>\n<li>YAML or XML files may have multiple levels (or sections)</li>\n<li>XML files must have a top root level named <em>configuration</em>  wrapping the lower levels.\nThis is removed from the python config dictionary before being passed to the algorithms.</li>\n<li>chain configuration files must have a <strong>log_files</strong> section (see <strong>required settings</strong>\nbelow for the format) to provide locations of the log files.</li>\n</ul>\n\n<p>Example of sections from a 2 level config file in YML:</p>\n\n<pre><code># some_key: str:  description\nsome_key: a string\n\nsection1:\n    key1: 1\n    key2: 1.5\n    some_data_location: $MYDATA/dem.nc\n\nsection2:\n    key: false\n</code></pre>\n\n<p>Example of sections from a 2 level config file in XML:</p>\n\n<pre><code>&lt;?xml version=\"1.0\"?&gt;\n\n&lt;!-- configuration xml level required, but removed in python dict --&gt;\n&lt;configuration&gt;\n\n&lt;!--some_key: str:  description--&gt;\n&lt;some_key&gt;a string&lt;/some_key&gt;\n\n&lt;section1&gt;\n   &lt;key1&gt;1&lt;/key1&gt;\n   &lt;key2&gt;1.5&lt;/key2&gt;\n   &lt;some_data_location&gt;$MYDATA/dem.nc&lt;/some_data_location&gt;\n&lt;/section1&gt;\n\n&lt;section2&gt;\n   &lt;key&gt;false&lt;/key&gt;\n&lt;/section2&gt;\n\n&lt;/configuration&gt;\n\n</code></pre>\n\n<p>These settings are available within Algorithm classes as a python dictionary called\n<strong>self.config</strong> as in the following examples:</p>\n\n<pre><code>self.config['section1']['key1']\nself.config['section1']['some_data_location']\nself.config['some_key']\n</code></pre>\n\n<p>The config file will also be\nmerged with the main run control dictionary. Settings in the chain configuration\nfile will take precedence over the main run control dictionary (if they are identical), so\nyou can override any main config settings in the named chain config if you want.</p>\n\n<h3 id=\"required-chain-configuration-settings\">Required Chain Configuration Settings</h3>\n\n<p>Each chain configuration file should contain sections to configure logging and breakpoints.\nSee the section on logging below for an explanation of the settings.</p>\n\n<p>Here is a minimal configuration file (XML format)</p>\n\n<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!--chain: mychain configuration file--&gt;\n\n&lt;configuration&gt; &lt;!-- note this level is removed in python dict --&gt;\n\n&lt;!--Setup default locations to store breakpoint files--&gt;\n&lt;breakpoint_files&gt;\n    &lt;!-- set the default directory where breakpoint files are stored --&gt;\n    &lt;default_dir&gt;/tmp&lt;/default_dir&gt;\n&lt;/breakpoint_files&gt;\n\n&lt;log_files&gt;\n    &lt;append_year_month_to_logname&gt;false&lt;/append_year_month_to_logname&gt;\n\n    &lt;!-- debug : str : path of the debug log file --&gt;\n    &lt;debug&gt;/tmp/debug.log&lt;/debug&gt;\n\n    &lt;!-- info : str : path of the info log file --&gt;\n    &lt;info&gt;/tmp/info.log&lt;/info&gt;\n\n    &lt;!-- errors : str : path of the errors log file --&gt;\n    &lt;errors&gt;/tmp/errors.log&lt;/errors&gt;\n&lt;/log_files&gt;\n\n&lt;!-- add more levels and settings below here --&gt;\n\n&lt;/configuration&gt;\n\n</code></pre>\n\n<p>The requirement for specific settings are set by the chain and it's algorithms.\nAn example of a chain configuration file can be found at:</p>\n\n<p><code>$CLEV2ER_BASE_DIR/config/chain_configs/cryotempo/cryotempo_C001.yml</code></p>\n\n<p>For testing purposes it is sometimes useful to modify configuration settings directly\nfrom the command line. This can be done using the command line option --conf_opts which\ncan contain a comma separated list of section:key:value pairs.</p>\n\n<p>An example of changing the value of the setting above would be:</p>\n\n<p>--conf_opts resources:mydata:${MYDATA_DIR}/somedata2.nc</p>\n\n<h2 id=\"developing-new-chains\">Developing New Chains</h2>\n\n<ol>\n<li>Decide on a chain name. For example <strong>newchain</strong></li>\n<li>Create $CLEV2ER_BASE_DIR/algorithms/<strong>newchain</strong>/ directory to store the new chain's algorithms.</li>\n<li>Create $CLEV2ER_BASE_DIR/algorithms/<strong>newchain</strong>/tests to store the new chain's\nalgorithm unit tests (using tests formatted for pytest). At least one algorithm test file\nshould be created per algorithm, which should contain suitable test functions.</li>\n<li>Create your algorithms by copying and renaming the algorithm class template\n$CLEV2ER_BASE_DIR/algorithms/testchain/alg_template1.py in to your algorithm directory. Each\nalgorithm\nshould have a different file name of your choice. For example: alg_retrack.py, alg_geolocate.py.\nYou need to fill in the appropriate sections of the init(), process() and finalize() functions\nfor each algorithm (see section below for more details on using algorithm classes).</li>\n<li>You must also create a test for each algorithm in\n$CLEV2ER_BASE_DIR/algorithms/<strong>newchain</strong>/tests.\nYou should copy/adapt the test template\n$CLEV2ER_BASE_DIR/algorithms/testchain/tests/test_alg_template1.py\nfor your new test.</li>\n<li>Each algorithm and their unit tests must pass the static code checks (pylint, mypy, etc) which\nare automatically run as git pre-commit hooks.</li>\n<li>Create a first XML or YML configuration file for the chain in\n$CLEV2ER_BASE_DIR/config/chain_configs/**newchain**/**newchain**_A001.yml. The configuration\nfile contains any settings or resource locations that are required by your algorithms, and\nmay include environment variables.</li>\n<li>If required create one or more finder class files. These allow fine control of L1b file\nselection from the command line (see section below for more details).</li>\n<li>Create an algorithm list YML file in\n$CLEV2ER_BASE_DIR/config/algorithm_lists/**newchain**/**newchain**_A001.yml.\nYou can copy the template\nin $CLEV2ER_BASE_DIR/config/algorithm_lists/testchain/testchain_A001.yml</li>\n<li>To test your chain on a single L1b file, you can use\n<code>run_chain.py --name newchain -f /path/to/a/l1b_file</code>. There are many other options for\n running chains (see <code>run_chain.py -h</code>).</li>\n</ol>\n\n<h2 id=\"algorithm-and-finder-classes\">Algorithm and Finder Classes</h2>\n\n<p>This section discusses how to develop algorithms for your chain. There are two types\nof algorithms, both of which are dynamically loaded at chain run-time.</p>\n\n<ul>\n<li>Main algorithms : standard chain algorithm classes</li>\n<li>Finder algorithms : optional classes to manage input L1b file selection</li>\n</ul>\n\n<h3 id=\"algorithm-lists\">Algorithm Lists</h3>\n\n<p>Algorithms are dynamically loaded in a chain when (and in the order ) they are named in the chain's\nalgorithm list YAML or XML file:\n$CLEV2ER_BASE_DIR/config/algorithm_lists/**chainname**/**chainname**.yml,.xml.\nThis has two sections (l1b_file_selectors, and algorithms) as shown in the example below:</p>\n\n<p>YML version:</p>\n\n<pre><code># List of L1b selector classes to call in order\nl1b_file_selectors:\n  - find_lrm  # find LRM mode files that match command line options\n  - find_sin  # find SIN mode files that match command line options\n# List of main algorithms to call in order\nalgorithms:\n  - alg_identify_file # find and store basic l1b parameters\n  - alg_skip_on_mode  # finds the instrument mode of L1b, skip SAR files\n  #- alg_...\n</code></pre>\n\n<p>XML version:</p>\n\n<p>The xml version requires an additional toplevel <code>&lt;algorithm_list&gt;</code> that wraps the other sections.\nIt also allows you to enable or disable individual algorithms within the list by setting the\nvalues <em>Enable</em> or <em>Disable</em>, and to set breakpoints by setting the value to <em>BreakpointAfter</em>.</p>\n\n<pre><code>&lt;?xml version=\"1.0\"?&gt;\n\n&lt;algorithm_list&gt;\n    &lt;algorithms&gt;\n        &lt;alg_identify_file&gt;Enable&lt;/alg_identify_file&gt;\n        &lt;alg_skip_on_mode&gt;Enable&lt;/alg_skip_on_mode&gt;\n        &lt;!-- ... more algorithms --&gt;\n        &lt;alg_retrack&gt;BreakpointAfter&lt;/alg_retrack&gt;\n    &lt;/algorithms&gt;\n\n    &lt;l1b_file_selectors&gt;\n        &lt;find_lrm&gt;Enable&lt;/find_lrm&gt;\n        &lt;find_sin&gt;Enable&lt;/find_sin&gt;\n    &lt;/l1b_file_selectors&gt;\n&lt;/algorithm_list&gt;\n\n</code></pre>\n\n<h3 id=\"main-algorithms\">Main Algorithms</h3>\n\n<p>Each algorithm is implemented in a separate module located in</p>\n\n<p><code>$CLEV2ER_BASE_DIR/src/clev2er/algorithms/&lt;chainname&gt;/&lt;alg_name&gt;.py</code></p>\n\n<p>Each algorithm module should contain an Algorithm class, as per the algorithm\ntemplate in:</p>\n\n<p><code>$CLEV2ER_BASE_DIR/src/clev2er/algorithms/testchain/alg_template1.py</code></p>\n\n<p>Please copy this template for all algorithms.</p>\n\n<p>Algorithm class modules have three main functions:</p>\n\n<ul>\n<li><strong>init()</strong> :  used for initializing/loading resources. Called once at the start of processing.</li>\n<li><strong>process</strong>(l1b:Dataset,shared_dict:dict) : called for every L1b file. The results of the\nprocessing may be saved in the shared_dict, so that it can be accessed by algorithms called\nfurther down the chain. The L1b data for the current file being processed is passed to this\nfunction in a netcdf4 Dataset as argument l1b.</li>\n<li><strong>finalize</strong>() : called at the end of all processing to free resouces.</li>\n</ul>\n\n<p>All of the functions have access to the merged chain configuration dictionary <strong>self.config</strong>.</p>\n\n<p>All logging must be done using <strong>self.log</strong>.info(), <strong>self.log</strong>.error(), <strong>self.log</strong>.debug().</p>\n\n<h4 id=\"algorithmprocess-return-values\">Algorithm.process() return values</h4>\n\n<p>It is important to note that Algorithm.<strong>process()</strong> return values affect how the\nchain operates. The .process() function returns (bool, str).</p>\n\n<p>Return values must be set as follows:</p>\n\n<ul>\n<li>(<strong>True</strong>,\"\") when the processing has completed without errors and continuation to the\nnext algorithm in the chain (if available) is expected.</li>\n<li>(<strong>False</strong>,\"<strong>SKIP_OK</strong> any reason message\") when the processing has found a valid reason for the\nchain to skip any further processing of the L1b file. For example if it does not measure over the\ntarget area. This will be logged as DEBUG message but is not an error. The chain will move to\nprocessing the next L1b file.</li>\n<li>(<strong>False</strong>,\"some error message\") : In this case the error message will be logged to the error log\nand the file will be skipped. If <strong>config</strong>[\"chain\"][\"<strong>stop_on_error</strong>\"] is False then the\nchain will continue to the next L1b file. If <strong>config</strong>[\"chain\"][\"<strong>stop_on_error</strong>\"] is True,\nthen the chain will stop.</li>\n</ul>\n\n<h3 id=\"filefinder-classes\">FileFinder Classes</h3>\n\n<p>FileFinder class modules provide more complex and tailored L1b input file selection\nthan would be possible with the standard <strong>run_chain.py</strong> command line options of :</p>\n\n<ul>\n<li>(<strong>--file path</strong>) : choose single L1b file</li>\n<li>(<strong>--dir dir</strong>) : choose all L1b files in a flat directory</li>\n</ul>\n\n<p>FileFinder classes are only used as the file selection method if the --file and --dir\ncommand line options are <strong>not</strong> used.</p>\n\n<p>For example you may wish to select files using a specific search pattern, or from multiple\ndirectories.</p>\n\n<p>FileFinder classes are automatically initialized with :</p>\n\n<ul>\n<li><strong>self.config</strong> dict from the merged chain dict, any settings can be used for file selection</li>\n<li><strong>self.months</strong> (from command line option --month, if used)</li>\n<li><strong>self.years</strong> (from command line option --year, if used)</li>\n</ul>\n\n<p>FileFinder classes return a list of file paths through their .find_files() function.\nCode needs to be added to the .find_files() function to generate the file list.</p>\n\n<p>Any number of differently named FileFinder class modules can be specified in the algorithm list\nfile,\nunder the <strong>l1b_file_selectors:</strong> section. File lists are concatentated if more than one Finder\nclass is used.</p>\n\n<p>An example of a FileFinder class module can be found in:</p>\n\n<p><code>clev2er.algorithms.cryotempo.find_lrm.py</code></p>\n\n<h2 id=\"logging\">Logging</h2>\n\n<p>Logging within the chain is performed using the python standard logging.Logger mechanism\nbut with some minor adaption to support multi-processing.</p>\n\n<p>Within algorithm modules, logging should be performed using the in-class Logger\ninstance accessed using <strong>self.</strong>log :</p>\n\n<ul>\n<li>self.log.<strong>info</strong>('message') : to log informational messages</li>\n<li>self.log.<strong>error</strong>('message') : to log error messages</li>\n<li>self.log.<strong>debug</strong>('message') : to log messages for debugging</li>\n</ul>\n\n<p>Debugging messages are only produced/saved if the chain is run in debug mode (use\nrun_chain.py <strong>--debug</strong> command line option)</p>\n\n<h3 id=\"log-file-locations\">Log file Locations</h3>\n\n<p>Info, error, and debug logs are stored in separate log files. The locations\nof the log files are set in the chain configuration file in a section called\n<strong>log_files</strong>. You can use environment variables in your log file paths.</p>\n\n<pre><code># Default locations for log files\nlog_files:\n  append_year_month_to_logname: true\n  errors: ${CT_LOG_DIR}/errors.log\n  info:   ${CT_LOG_DIR}/info.log\n  debug:  ${CT_LOG_DIR}/debug.log\n</code></pre>\n\n<p>The <strong>append_year_month_to_logname</strong> setting is used if the chain is\nrun with the --year (and/or) --month command line args. Note that these\ncommand line options are passed to the optional finder classes to generate a\nlist of L1b input files.</p>\n\n<p>If these are used and the append_year_month_to_logname setting is <strong>true</strong>,\nthen the year and month are appended to the log file names as follows:</p>\n\n<ul>\n<li><em>logname</em>_<em>MMYYYY</em>.log : if both month and year are specified</li>\n<li><em>logname</em>_<em>YYYY</em>.log : if only year is used</li>\n</ul>\n\n<h3 id=\"logging-when-using-multi-processing\">Logging when using Multi-Processing</h3>\n\n<p>When multi-processing mode is selected then logged messages are automatically passed\nthrough a pipe to a temporary file (<em>logfilename</em>.mp). This will\ncontain an unordered list of messages from all processes, which is difficult\nto read directly.</p>\n\n<p>At the end of the chain run the multi-processing log outputs are automatically sorted\nso that messages relating to each L1b file processing are collected together\nin order. This is then merged in to the main log file.</p>\n\n<h2 id=\"breakpoint-files\">Breakpoint Files</h2>\n\n<h6 id=\"breakpoints-can-be-set-after-any-algorithm-by\">Breakpoints can be set after any Algorithm by:</h6>\n\n<blockquote>\n  <ul>\n  <li>setting the <em>BreakpointAfter</em> value in the chain's Algorithm list, or</li>\n  <li>using the run_chain.py command line argument **--breakpoint_after** *algorithm_name*</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"when-a-breakpoint-is-set\">When a breakpoint is set:</h6>\n\n<blockquote>\n  <ul>\n  <li>the chain will stop after the specified algorithm has completed for each input file.</li>\n  <li>the contents of the chain's <em>shared_dict</em> will be saved as a NetCDF4 file in the\n  <code>&lt;breakpoint_dir&gt;</code> as specified in the <em>breakpoints:default_dir</em> section in the chain\n  configuration file.</li>\n  <li>the NetCDF4 file will be named as <code>&lt;breakpoint_dir&gt;/&lt;l1b_file_name&gt;_bkp.nc</code></li>\n  <li>if multiple L1b files are being processed through the chain, a breakpoint file\n  will be created for each.</li>\n  <li>single values or strings in the <em>shared_dict</em> will be included as global or group\n  NetCDF attributes.</li>\n  <li>if there are multiple levels in the <em>shared_dict</em> then a NetCDF group will be\n  created for each level.</li>\n  <li>multi-dimensional arrays (or numpy arrays) are supported up to dimension 3.</li>\n  <li>NetCDF dimension variables will not be named with physical meaning (ie time),\n  as this information can not be generically derived. Instead dimensions will be\n  named dim1, dim2, etc.</li>\n  <li>all variables with the same dimension will share a common NetCDF dimension (ie dim1, etc)</li>\n  </ul>\n</blockquote>\n\n<h2 id=\"developer-notes\">Developer Notes</h2>\n\n<h3 id=\"code-checks-before-committing\">Code checks before committing</h3>\n\n<p>It is recommended to run pre-commit before a <code>git commit</code>. This runs the static\ncode analysis tests (isort, pylint, ruff, mypy,.. ) on your code and shows you any\nfailures before you commit. The same tests are also run when you commit (and must pass).</p>\n\n<p><code>precommit run --all</code></p>\n\n<h3 id=\"automatic-documentation\">Automatic Documentation</h3>\n\n<p>This user manual is hosted on GitHub pages (<a href=\"https://mssl-softeng.github.io/clev2er\">https://mssl-softeng.github.io/clev2er</a>)</p>\n\n<p>Content is created from doctrings\n(optionally containing Markdown: <a href=\"https://www.markdownguide.org/basic-syntax/#code\">https://www.markdownguide.org/basic-syntax/#code</a> )\nin the code,\nusing the <em>pdoc</em> package : <a href=\"https://pdoc.dev\">https://pdoc.dev</a></p>\n\n<p>Diagrams are implemented using mermaid: <a href=\"https://mermaid.js.org\">https://mermaid.js.org</a></p>\n\n<p>The site is locally built in <code>$CLEV2ER_BASE_DIR/docs</code>, using a pre-commit hook\n(hook id: pdocs_build).\nHooks are configured in <code>$CLEV2ER_BASE_DIR/.pre-commit-config.yaml</code></p>\n\n<p>The hook calls the script <code>$CLEV2ER_BASE_DIR/pdocs_build.sh</code> to build the site\nwhenever a <code>git commit</code> is run.</p>\n\n<p>When a <code>git push</code> is run, GitHub automatically extracts the site from the\ndocs directory and publishes it.</p>\n\n<p>The front page of the site (ie this page) is located in the doctring within\n<code>$CLEV2ER_BASE_DIR/src/clev2er/__init__.py</code>.</p>\n\n<p>The docstring within <code>__init__.py</code> of each package directory should provide\nmarkdown to describe the directories beneath it.</p>\n"}, {"fullname": "clev2er.algorithms", "modulename": "clev2er.algorithms", "kind": "module", "doc": "<h2 id=\"algorithm-directories\">Algorithm Directories</h2>\n\n<p>The clev2er -> <strong>algorithms</strong> contains sub-directories for each chain.  </p>\n\n<p>For example:  <code>clev2er.algorithms.cryotempo</code></p>\n\n<p>in this case <strong>cryotempo</strong> is the chain name, and the <em>cryotempo</em> directory contains\nalgorithms for its chain.</p>\n\n<h2 id=\"templates-directory\">Templates directory</h2>\n\n<p>The <code>clev2er.algorithms.testchain</code> directory contains a template algorithms to be copied for\nnew chain algorithms.</p>\n"}, {"fullname": "clev2er.algorithms.base", "modulename": "clev2er.algorithms.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.algorithms.base.base_alg", "modulename": "clev2er.algorithms.base.base_alg", "kind": "module", "doc": "<p>clev2er.algorithms.base.base_alg</p>\n"}, {"fullname": "clev2er.algorithms.base.base_alg.BaseAlgorithm", "modulename": "clev2er.algorithms.base.base_alg", "qualname": "BaseAlgorithm", "kind": "class", "doc": "<p><strong>Algorithm to do...</strong>.</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<pre><code>- shared_dict['param'] : (type), param description\n</code></pre>\n"}, {"fullname": "clev2er.algorithms.base.base_alg.BaseAlgorithm.__init__", "modulename": "clev2er.algorithms.base.base_alg", "qualname": "BaseAlgorithm.__init__", "kind": "function", "doc": "<p>Runs init() if not in multi-processing mode</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n<li><strong>log (logging.Logger):</strong>  initial log instance to use for this algorithm</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.algorithms.base.base_alg.BaseAlgorithm.init", "modulename": "clev2er.algorithms.base.base_alg", "qualname": "BaseAlgorithm.init", "kind": "function", "doc": "<p>Algorithm initialization template</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.base.base_alg.BaseAlgorithm.set_log", "modulename": "clev2er.algorithms.base.base_alg", "qualname": "BaseAlgorithm.set_log", "kind": "function", "doc": "<p>function to set the logger to use within this algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>log (logging.Logger):</strong>  assign the logging instance to use for this algorithm</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.base.base_alg.BaseAlgorithm.set_filenum", "modulename": "clev2er.algorithms.base.base_alg", "qualname": "BaseAlgorithm.set_filenum", "kind": "function", "doc": "<p>set the current file number (0..(max_files-1))</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filenum (int):</strong>  current file number being processed</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.base.base_alg.BaseAlgorithm.process_setup", "modulename": "clev2er.algorithms.base.base_alg", "qualname": "BaseAlgorithm.process_setup", "kind": "function", "doc": "<p>common pre-processor which tests the L1b Dataset is valid\n   and also runs BaseAlgorithm.init() if in multi-processing mode\n   This should be run as a first step inside Algorithm.process()</p>\n\n<pre><code>`success, error_str = self.process_setup(l1b)`\n</code></pre>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.base.base_alg.BaseAlgorithm.finalize", "modulename": "clev2er.algorithms.base.base_alg", "qualname": "BaseAlgorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.base.base_finder", "modulename": "clev2er.algorithms.base.base_finder", "kind": "module", "doc": "<p>clev2er.algorithms.base.base_finder</p>\n"}, {"fullname": "clev2er.algorithms.base.base_finder.BaseFinder", "modulename": "clev2er.algorithms.base.base_finder", "qualname": "BaseFinder", "kind": "class", "doc": "<p>Base class to find a list of L1b files</p>\n\n<p>Raises: FileNotFoundError : if base_path is not a valid directory</p>\n"}, {"fullname": "clev2er.algorithms.base.base_finder.BaseFinder.__init__", "modulename": "clev2er.algorithms.base.base_finder", "qualname": "BaseFinder.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.algorithms.base.base_finder.BaseFinder.add_month", "modulename": "clev2er.algorithms.base.base_finder", "qualname": "BaseFinder.add_month", "kind": "function", "doc": "<p>Add to list of month numbers to load</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>month (int):</strong>  month number</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.base.base_finder.BaseFinder.add_year", "modulename": "clev2er.algorithms.base.base_finder", "qualname": "BaseFinder.add_year", "kind": "function", "doc": "<p>Add to list of year numbers to load</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>year (int):</strong>  year number in YYYY</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.base.base_finder.BaseFinder.find_files", "modulename": "clev2er.algorithms.base.base_finder", "qualname": "BaseFinder.find_files", "kind": "function", "doc": "<p>Search for L1b file according to pattern</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>flat_search (bool) :</strong>  if True only search in self.base_path, else use pattern</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str): list of files</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flat_search</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.base.tests", "modulename": "clev2er.algorithms.base.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.algorithms.base.tests.test_finders", "modulename": "clev2er.algorithms.base.tests.test_finders", "kind": "module", "doc": "<p>test_finders.py</p>\n"}, {"fullname": "clev2er.algorithms.base.tests.test_finders.FileFinder", "modulename": "clev2er.algorithms.base.tests.test_finders", "qualname": "FileFinder", "kind": "class", "doc": "<p>class to return a list of L1b files</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>BaseFinder (BaseFinder):</strong>  base finder class</li>\n</ul>\n\n<p>In order to find files you can optionally use the following\nwhich are optionally set by the run_chain.py command line parameters</p>\n\n<h6 id=\"set-by-command-line-options\">Set by command line options:</h6>\n\n<blockquote>\n  <p>self.months  # list of months to find\n  self.years   # list of years to find</p>\n</blockquote>\n\n<h6 id=\"set-by-config-file-settings\">Set by config file settings:</h6>\n\n<blockquote>\n  <p>config[\"l1b_base_dir\"]</p>\n</blockquote>\n", "bases": "clev2er.algorithms.base.base_finder.BaseFinder"}, {"fullname": "clev2er.algorithms.base.tests.test_finders.FileFinder.find_files", "modulename": "clev2er.algorithms.base.tests.test_finders", "qualname": "FileFinder.find_files", "kind": "function", "doc": "<p>find list of L1b files</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>flat_search (bool, optional):</strong>  _description_. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flat_search</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo", "modulename": "clev2er.algorithms.cryotempo", "kind": "module", "doc": "<h1 id=\"algorithms-for-the-cryotempo-land-ice-chain\">Algorithms for the cryotempo land ice chain</h1>\n\n<p>Contains  algorithms for the ESA CryoTEMPO Project's land ice\ntheme. Algorithms are usually implemented in the order shown in the diagram below\n(although the actual order is specified in the algorithm list \nused i.e. <code>$CLEV2ER_BASE_DIR/config/algorithm_lists/cryotempo.yml</code>).</p>\n\n<p>Click on the algorithm names in the Submodules section to the left to view further\ndetails on each Algorithm.</p>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    AA(L1b)--&gt;A\n    A[alg_identify_file]--&gt;B[alg_skip_on_mode]\n    B--&gt;C[alg_skip_on_area_bounds]\n    C--&gt;D[alg_surface_type]\n    D--&gt;E[alg_dilated_coastal_mask]\n</div></pre>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    E[alg_cats2008a_tide_correction]--&gt;F[alg_fes2014b_tide_correction]\n    F--&gt;G[alg_geo_corrections]\n    G--&gt;H[alg_waveform_quality]\n</div></pre>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    I[alg_retrack]--&gt;J[alg_backscatter]\n    J--&gt;K[alg_geolocate_lrm]\n    K--&gt;L[alg_geolocate_sin]\n    L--&gt;M[alg_basin_ids]\n</div></pre>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    M[alg_ref_dems]--&gt;N[alg_filter_height]\n    N--&gt;O[alg_uncertainty]\n    O--&gt;P[alg_product_output]\n</div></pre>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_backscatter", "modulename": "clev2er.algorithms.cryotempo.alg_backscatter", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_backscatter</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_backscatter.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_backscatter", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to calculate Backscatter from CS2 L1b dataset</strong>.</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><strong>Contribution to shared_dict</strong>\n    - shared_dict[\"sig0_20_ku\"] (np.ndarray) : array of backscatter values\n**Required from other algorithms**\n-   shared_dict[\"pwr_at_rtrk_point\"]\n-   shared_dict[\"range_cor_20_ku\"]</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_backscatter.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_backscatter", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization function</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<p>Test for KeyError or OSError exceptions and raise them if found\nrather than just returning (False,\"error description\")</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  for keys not found in self.config</li>\n<li><strong>OSError :</strong>  for any file related errors</li>\n</ul>\n\n<p>Note:</p>\n\n<ul>\n<li>retrieve required config data from self.config dict</li>\n<li>log using self.log.info(), or self.log.error() or self.log.debug()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_backscatter.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_backscatter", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function, called for every L1b file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms. Use this dict\nto pass algorithm results down the chain or read variables\nset by other algorithms.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>Note:</p>\n\n<ul>\n<li>retrieve required config data from self.config dict (read-only)</li>\n<li>retrieve data from other algorithms from shared_dict</li>\n<li>add results,variables from this algorithm to shared_dict</li>\n<li>log using self.log.info(), or self.log.error() or self.log.debug()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_basin_ids</p>\n\n<h1 id=\"new-in-baseline-d\">New in Baseline-D</h1>\n\n<p>Mouginot (Greenland) replaces Zwally (Greenland)</p>\n\n<ul>\n<li>basin_id : Zwally (AIS) and Mouginot (GIS)</li>\n<li>basin_id_2: Rignot (both AIS and GIS)</li>\n</ul>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to do find ice sheet basin id for each location along track</strong></p>\n\n<p>BaseAlgorithm: __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>* Contribution to Shared Dictionary *</em></p>\n\n<pre><code>- shared_dict[\"basin_mask_values_rignot\"] : (np.ndarray), basin mask values from Rignot\n- shared_dict[\"basin_mask_values_zwally\"] : (np.ndarray), basin mask values from Zwally\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to load the corresponding CATS2008a tide correction file\nand extract the tide corrections.</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><strong>Requires from shared dictionary</strong>:</p>\n\n<ul>\n<li><code>shared_dict[\"l1b_file_name\"]</code> : str</li>\n<li><code>shared_dict[\"hemisphere\"]</code> : str</li>\n<li><code>shared_dict[\"instr_mode\"]</code> : str</li>\n<li><code>shared_dict[\"num_20hz_records\"]</code> : int</li>\n<li><code>shared_dict[\"floating_ice_locations\"]</code> : list[int]</li>\n<li><code>shared_dict[\"ocean_locations\"]</code> : list[int]</li>\n</ul>\n\n<p><strong>Outputs to shared dictionary</strong>:</p>\n\n<ul>\n<li><code>shared_dict[\"cats_tide\"]</code> : np.ndarray</li>\n<li><code>shared_dict[\"cats_tide_required\"]</code> : bool, True if CATS tide has been calculated</li>\n</ul>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_dilated_coastal_mask</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to\nForm a mask array of points to include from a 10km dilated Ant or Grn coastal mask.\nDilated coastal masks come from the Mask class :\nMask('antarctica_iceandland_dilated_10km_grid_mask')\nMask('greenland_iceandland_dilated_10km_grid_mask')</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<h1 id=\"contributions-to-shared_dict\">Contributions to shared_dict:</h1>\n\n<pre><code>shared_dict[\"dilated_surface_mask\"] : (ndarray) of bool, True is inside dilated mask\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<p>Interpolate surface type data from Bedmachine for nadir locations of L1b\nTranspose surface type values from Bedmachine grid to CryoTEMPO values:\n0=ocean, 1=grounded_ice, 2=floating_ice, 3=ice_free_land,4=non-Greenland land</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_dump</p>\n\n<p>print the shared_dict</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm", "kind": "class", "doc": "<p><em>* Algorithm to print shared_dict to stdout *</em></p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to get FES2014b tide correction for locations in l1b file</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>*Contribution to Shared Dict *</em>\n    - shared_dict[\"fes2014b_corrections\"][\"ocean_tide_20\"] : np.ndarray\n    - shared_dict[\"fes2014b_corrections\"][\"ocean_tide_eq_20\"] : np.ndarray\n    - shared_dict[\"fes2014b_corrections\"][\"load_tide_20\"] : np.ndarray</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_filter_height", "modulename": "clev2er.algorithms.cryotempo.alg_filter_height", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_filter_height</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_filter_height.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_filter_height", "qualname": "Algorithm", "kind": "class", "doc": "<p>filter on maximum diff to ref dem</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_filter_height.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_filter_height", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_filter_height.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_filter_height", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geo_corrections</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to calculate geophysical corrections for a CS2 l1b file</strong></p>\n\n<p>1b) Calculate sum of geo-corrections\nFloating ice/ocean: DRY + WET + DAC + GIM + OT + LPEOT + OLT + SET + GPT\nLand ice:           DRY + WET +       GIM +              OLT + SET + GPT</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>*Contribution to Shared Dict *</em></p>\n\n<pre><code>- shared_dict[\"sum_cor_20_ku\"] : sum of geo -corrections\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geolocate_lepta</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to perform LRM geolocation using an adpated Roemer/LEPTA method</strong>.</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>Relocation using 100m or 200m DEMS, using</p>\n\n<p>antarctic_dem: rema_ant_200m\ngreenland_dem: arcticdem_100m_greenland</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<pre><code>- shared_dict[\"lat_poca_20_ku\"] : np.ndarray (POCA latitudes)\n- shared_dict[\"lon_poca_20_ku\"] : np.ndarray (POCA longitudes)\n- shared_dict[\"height_20_ku\"]   : np.ndarray (elevations)\n- shared_dict[\"latitudes\"]   : np.ndarray (final latitudes == POCA or nadir if failed)\n- shared_dict[\"longitudes\"]   : np.ndarray (final lons == POCA or nadir if failed)\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geolocate_lrm</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lrm.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to geolocate measurements to the POCA (point of closest approach) for LRM</strong></p>\n\n<p>Also to calculate height_20_ku</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>* Contribution to Shared Dictionary *</em></p>\n\n<pre><code>- shared_dict[\"lat_poca_20_ku\"] : np.ndarray (POCA latitudes)\n- shared_dict[\"lon_poca_20_ku\"] : np.ndarray (POCA longitudes)\n- shared_dict[\"height_20_ku\"]   : np.ndarray (elevations)\n- shared_dict[\"latitudes\"]   : np.ndarray (final latitudes == POCA or nadir if failed)\n- shared_dict[\"longitudes\"]   : np.ndarray (final lons == POCA or nadir if failed)\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lrm.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lrm.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_roemer", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_roemer", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geolocate_roemer</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_roemer.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_roemer", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to perform LRM geolocation using a Roemer method</strong>.</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>Relocation using 100m or 200m DEMS, using</p>\n\n<p>antarctic_dem: rema_ant_200m\ngreenland_dem: arcticdem_100m_greenland</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<pre><code>- shared_dict[\"lat_poca_20_ku\"] : np.ndarray (POCA latitudes)\n- shared_dict[\"lon_poca_20_ku\"] : np.ndarray (POCA longitudes)\n- shared_dict[\"height_20_ku\"]   : np.ndarray (elevations)\n- shared_dict[\"latitudes\"]   : np.ndarray (final latitudes == POCA or nadir if failed)\n- shared_dict[\"longitudes\"]   : np.ndarray (final lons == POCA or nadir if failed)\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_roemer.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_roemer", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_roemer.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_roemer", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_roemer.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_roemer", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geolocate_sin</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to geolocate measurements to the POCA (point of closest approach) for SIN</strong></p>\n\n<p>Also to calculate height_20_ku</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>* Contribution to Shared Dictionary *</em></p>\n\n<pre><code>- shared_dict[\"lat_poca_20_ku\"] : np.ndarray (POCA latitudes)\n- shared_dict[\"lon_poca_20_ku\"] : np.ndarray (POCA longitudes)\n- shared_dict[\"height_20_ku\"]   : np.ndarray (elevations)\n- shared_dict[\"latitudes\"]   : np.ndarray (final latitudes == POCA or nadir if failed)\n- shared_dict[\"longitudes\"]   : np.ndarray (final lons == POCA or nadir if failed)\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_template</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to <strong>identify L1b file</strong>,</p>\n\n<ol>\n<li>find the instrument mode</li>\n<li>find the number of records</li>\n</ol>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)\n<strong>Contribution to shared dictionary</strong></p>\n\n<ul>\n<li>shared_dict[\"instr_mode\"]</li>\n<li>shared_dict[\"num_20hz_records\"]</li>\n</ul>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_template</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.cnes_cycle_to_subcycle", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "cnes_cycle_to_subcycle", "kind": "function", "doc": "<p>Calculate the CNES CS2 sub-cycle and track number number</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cycle_number (int):</strong>  ESA CS2 cycle number from L1b</li>\n<li><strong>rel_orbit_number (int):</strong>  CS2 relative orbit within ESA cycle</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int,int]: sub cycle number, track number</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cycle_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">rel_orbit_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.get_current_commit_hash", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "get_current_commit_hash", "kind": "function", "doc": "<p>retrieve the current git commit version\n   or None if not available</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>log (logging.Logger) :</strong>  current log instance to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: git commit hash, or '' if failed</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to write L2 CryoTEMPO output files</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<p>shared_dict['product_filename']: (str), path of L2 Cryo-Tempo product file created</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_ref_dem</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to find reference DEM elevation values for each track location</strong></p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<pre><code>**Contribution to shared dictionary**\n\n- shared_dict['dem_elevation_values'] : (ndarray), reference DEM elevation values (m) for\n                                                   each track location\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_retrack", "modulename": "clev2er.algorithms.cryotempo.alg_retrack", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_retrack</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_retrack.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_retrack", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to retrack CS2 waveforms</strong></p>\n\n<p><strong>For SARin</strong> waveforms:\n<code>clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker</code> called<br>\n<strong>For LRM</strong> waveforms: <code>cs2_tcog_retracker()</code> called</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p>Tuning thresholds are set in config.</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<ul>\n<li>shared_dict[\"ind_wfm_retrack_20_ku\"]: (np.ndarray) closest bin number to retracking point(s)</li>\n<li>shared_dict[\"pwr_at_rtrk_point\"] : (np.ndarray) waveform power at the retracking point</li>\n<li>shared_dict[\"range_cor_20_ku\"] : (np.ndarray) corrected range (retracked and geo-corrected)</li>\n<li>shared_dict[\"num_retracker_failures\"] (int) : number of retracker failures</li>\n<li>shared_dict[\"percent_retracker_failure\"]  (float) : percentage of retracker failures</li>\n<li>shared_dict[\"geo_corrected_tracker_range\"] : (np.ndarray) geocorrected tracker range</li>\n<li>shared_dict[\"retracker_correction\"] : (np.ndarray) retracker correction</li>\n<li>shared_dict[\"leading_edge_start\"] : (np.ndarray) positions of leading edge start</li>\n<li>shared_dict[\"leading_edge_stop\"] : (np.ndarray) positions of leading edge stop</li>\n</ul>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_retrack.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_retrack", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_retrack.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_retrack", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_skip_on_area_bounds</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to do a fast check on whether the l1b file\n   is within area bounds of Antarctica and Greenland.\nDepending on the mode (LRM, SIN) we can reject files that are in\ncertain lat or lon ranges, as we know they do not pass over\nGreenland or Antarctica</p>\n\n<p>Also if config['grn_only'] is True and track is in southern\nhemisphere Skip.</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)\n<strong>Contribution to shared dictionary</strong></p>\n\n<ul>\n<li>shared_dict[\"lats_nadir\"]</li>\n<li>shared_dict[\"lons_nadir\"]</li>\n<li>shared_dict[\"hemisphere\"]</li>\n</ul>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_skip_on_mode</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to skip if mode is not LRM or SIN</strong></p>\n\n<p>Tests shared_dict['instr_mode] which is one of  'LRM' or 'SIN' or 'SAR'</p>\n\n<p>if mode is SAR, return (False,\"SKIP_OK...\")</p>\n\n<p>Also,\nif config['lrm_only] is True and mode is not LRM, Skip\nif config['sin_only] is True and mode is not SIN, Skip</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<p>None</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_surface_type</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to find the surface type from Bedmachine v2 (ANT)/v3 (GRN)</strong></p>\n\n<p>Contributions to shared_dict:\n    shared_dict[\"ocean_locations\"] : (ndarray), ocean locations\n    shared_dict[\"grounded_ice_locations\"]  : (ndarray), grounded ice locations\n    shared_dict[\"floating_ice_locations\"]  : (ndarray), floating ice locations\n    shared_dict[\"icefree_land_locations\"]  : (ndarray), ice free land locations\n    shared_dict[\"non_grn_land_locations\"]  : (ndarray), locations of land locs not in Greenland\n    shared_dict[\"cryotempo_surface_type\"]  : (ndarray), values of surface type as specified\n                                             CT (0..4), as shown below</p>\n\n<p>corresponding to L1b records\n Uses:</p>\n\n<ul>\n<li>Bedmachine v2 for Antarctica : <a href=\"https://nsidc.org/data/nsidc-0756/versions/2\">https://nsidc.org/data/nsidc-0756/versions/2</a></li>\n<li>Bedmachine v3 for Greenland : <a href=\"https://nsidc.org/data/idbmg4\">https://nsidc.org/data/idbmg4</a></li>\n</ul>\n\n<p>Antarctica mask values: 0,1,2,3,4 = ocean ice_free_land grounded_ice\n                                    floating_ice lake_vostok\nGreenland mask values: 0,1,2,3,4 = ocean ice_free_land grounded_ice floating_ice\n                                    non-Greenland land</p>\n\n<p>Remap to Cryo-TEMPO surface type values (from ATBD):</p>\n\n<h6 id=\"antarctica\">Antarctica:</h6>\n\n<blockquote>\n  <p>CT --  surface (source value)\n          0  --  ocean (0)\n          1  --  grounded ice (2 (grounded Ice) and 4 (Lake Vostok))\n          2  --  floating ice (3)\n          3  --  ice free land (1)</p>\n  \n  <p>Greenland:\n    CT --  surface (source value)\n          0  --  ocean (0)\n          1  --  grounded ice (2)\n          2  --  floating ice (3)\n          3  --  ice free land (1)\n          4  --  non-Greenland land (4)</p>\n</blockquote>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_uncertainty", "modulename": "clev2er.algorithms.cryotempo.alg_uncertainty", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_uncertainty</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_uncertainty.get_binned_values", "modulename": "clev2er.algorithms.cryotempo.alg_uncertainty", "qualname": "get_binned_values", "kind": "function", "doc": "<p>Retrieve the median absolute elevation difference for arrays of slope and roughness values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slope_values (np.ndarray):</strong>  Array of slope values for which to retrieve median differences.</li>\n<li><strong>roughness_values (np.ndarray):</strong>  Array of roughness values for which to retrieve\nmedian differences.</li>\n<li><strong>binned_table (pd.DataFrame):</strong>  A pivot table of binned median absolute elevation differences.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: An array of median absolute elevation differences corresponding to the\n              input slope and roughness pairs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slope_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_uncertainty.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_uncertainty", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to retrieve elevation uncertainty from (CS2-IS2) derived uncertainty table and\nsurface slope at each measurement</strong></p>\n\n<p><strong>Contribution to shared_dict</strong>\n    -shared_dict[\"uncertainty\"] : (np.ndarray) uncertainty at each track location</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_uncertainty.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_uncertainty", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_uncertainty.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_uncertainty", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_waveform_quality</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to perform waveform quality checks</strong>.</p>\n\n<p>Separate checks for SARIN and LRM waveforms</p>\n\n<p>SARIN waveforms : <code>sarin_waveform_qc_checks()</code><br>\n    thresholds :<br>\n    config[\"sin_waveform_quality_tests\"][\"total_power_threshold\"]<br>\n    config[\"sin_waveform_quality_tests\"][\"low_peakiness_threshold\"]<br>\n    config[\"sin_waveform_quality_tests\"][\"low_position_max_power\"]<br>\n    config[\"sin_waveform_quality_tests\"][\"high_position_max_power\"]</p>\n\n<p>LRM waveforms: <code>lrm_waveform_qc_checks()</code><br>\n    config[\"lrm_waveform_quality_tests\"][\"total_power_threshold\"]<br>\n    config[\"lrm_waveform_quality_tests\"][\"low_peakiness_threshold\"]<br>\n    config[\"lrm_waveform_quality_tests\"][\"high_peakiness_threshold\"]<br></p>\n\n<p><strong>Contribution to shared_dict</strong>:<br>\n<code>shared_dict[\"waveforms_to_include\"]</code> : nd.array of size num_records containing bool vals\nindicating to include waveform in future analysis based on waveform quality and being\ninside dilated surface mask</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "kind": "module", "doc": "<p>find_lrm module</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.test_nc_file_in_greenland", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "test_nc_file_in_greenland", "kind": "function", "doc": "<p>test if L1b file's global attributes indicate it is measuring over\n   Greenland</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file (str):</strong>  path of CS2 L1b file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None|str : None if not over Grn, file if it is</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder", "kind": "class", "doc": "<p>class to find a list of LRM L1b files to process in one or more\n   specified months, from</p>\n\n<p><base_path>/LRM/<YYYY>/<MM>/CS_*SIR_*.nc</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>BaseFinder (BaseFinder):</strong>  base finder class</li>\n</ul>\n\n<p>In order to find files you can optionally use the following\nwhich are optionally set by the run_chain.py command line parameters</p>\n\n<h6 id=\"set-by-command-line-options\">Set by command line options:</h6>\n\n<blockquote>\n  <p>self.months  # list of months to find\n  self.years   # list of years to find</p>\n</blockquote>\n\n<h6 id=\"set-by-config-file-settings\">Set by config file settings:</h6>\n\n<blockquote>\n  <p>config[\"l1b_base_dir\"]</p>\n</blockquote>\n", "bases": "clev2er.algorithms.base.base_finder.BaseFinder"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder.find_files", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder.find_files", "kind": "function", "doc": "<p>Search for L1b file according to pattern</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>flat_search (bool) :</strong>  if True only search in l1b_base_dir, else use pattern</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str): list of files</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flat_search</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin", "modulename": "clev2er.algorithms.cryotempo.find_sin", "kind": "module", "doc": "<p>find_sin module</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.test_nc_file_in_greenland", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "test_nc_file_in_greenland", "kind": "function", "doc": "<p>test if L1b file's global attributes indicate it is measuring over\n   Greenland</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file (str):</strong>  path of CS2 L1b file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None|str : None if not over Grn, file(name) if it is</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder", "kind": "class", "doc": "<p>class to find a list of SIN L1b files to process in one or more\n   specified months, from</p>\n\n<p><base_path>/SIN/<YYYY>/<MM>/CS_*SIR_*.nc</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>BaseFinder (BaseFinder):</strong>  base finder class</li>\n</ul>\n\n<p>In order to find files you can optionally use the following\nwhich are optionally set by the run_chain.py command line parameters</p>\n\n<h6 id=\"set-by-command-line-options\">Set by command line options:</h6>\n\n<blockquote>\n  <p>self.months  # list of months to find\n  self.years   # list of years to find</p>\n</blockquote>\n\n<h6 id=\"set-by-config-file-settings\">Set by config file settings:</h6>\n\n<blockquote>\n  <p>config[\"l1b_base_dir\"]</p>\n</blockquote>\n", "bases": "clev2er.algorithms.base.base_finder.BaseFinder"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder.find_files", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder.find_files", "kind": "function", "doc": "<p>Search for L1b file according to pattern</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>flat_search (bool) :</strong>  if True only search in l1b_base_dir, else use pattern</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str): list of files</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flat_search</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests", "modulename": "clev2er.algorithms.cryotempo.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_backscatter", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_backscatter", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_backscatter.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_backscatter.test_alg_backscatter", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_backscatter", "qualname": "test_alg_backscatter", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_backscatter.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_basin_ids", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_basin_ids", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_basin_ids.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_basin_ids.test_alg_basin_ids", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_basin_ids", "qualname": "test_alg_basin_ids", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_basin_ids.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_cats2008a_tide_correction", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_cats2008a_tide_correction", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_cats2008a_tide_correction.test_alg_cats2008a_tide_correction", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_cats2008a_tide_correction", "qualname": "test_alg_cats2008a_tide_correction", "kind": "function", "doc": "<p>test of Algorithm in clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_dilated_coastal_mask", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_dilated_coastal_mask", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_dilated_coastal_mask.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_dilated_coastal_mask.test_alg_dilated_coastal_mask", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_dilated_coastal_mask", "qualname": "test_alg_dilated_coastal_mask", "kind": "function", "doc": "<p>test of Algorithm in clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_fes2014b_tide_correction", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_fes2014b_tide_correction", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_fes2014b_tide_correction.test_alg_fes2014b_tide_correction", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_fes2014b_tide_correction", "qualname": "test_alg_fes2014b_tide_correction", "kind": "function", "doc": "<p>test of Algorithm in clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_filter_height", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_filter_height", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_filter_height.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_filter_height.test_alg_filter_height", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_filter_height", "qualname": "test_alg_filter_height", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_filter_height.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lepta", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lepta", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_geolocate_lepta.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lepta.distance_between_latlon_points", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lepta", "qualname": "distance_between_latlon_points", "kind": "function", "doc": "<p>Calculate the great-circle distance between two points\non the earth (specified in decimal degrees)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitudes1</span>, </span><span class=\"param\"><span class=\"n\">longitudes1</span>, </span><span class=\"param\"><span class=\"n\">latitudes2</span>, </span><span class=\"param\"><span class=\"n\">longitudes2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lepta.test_alg_geolocate_lrm", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lepta", "qualname": "test_alg_geolocate_lrm", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_geolocate_lepta.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span>, </span><span class=\"param\"><span class=\"n\">l2i_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lrm", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lrm", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_geolocate_lrm.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lrm.distance_between_latlon_points", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lrm", "qualname": "distance_between_latlon_points", "kind": "function", "doc": "<p>Calculate the great-circle distance between two points\non the earth (specified in decimal degrees)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitudes1</span>, </span><span class=\"param\"><span class=\"n\">longitudes1</span>, </span><span class=\"param\"><span class=\"n\">latitudes2</span>, </span><span class=\"param\"><span class=\"n\">longitudes2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lrm.test_alg_geolocate_lrm", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_lrm", "qualname": "test_alg_geolocate_lrm", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_geolocate_lrm.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span>, </span><span class=\"param\"><span class=\"n\">l2i_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_roemer", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_roemer", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_geolocate_roemer.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_roemer.distance_between_latlon_points", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_roemer", "qualname": "distance_between_latlon_points", "kind": "function", "doc": "<p>Calculate the great-circle distance between two points\non the earth (specified in decimal degrees)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitudes1</span>, </span><span class=\"param\"><span class=\"n\">longitudes1</span>, </span><span class=\"param\"><span class=\"n\">latitudes2</span>, </span><span class=\"param\"><span class=\"n\">longitudes2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_roemer.test_alg_geolocate_roemer", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_roemer", "qualname": "test_alg_geolocate_roemer", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_geolocate_roemer.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span>, </span><span class=\"param\"><span class=\"n\">l2i_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_sin", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_sin", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_geolocate_sin.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_sin.distance_between_latlon_points", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_sin", "qualname": "distance_between_latlon_points", "kind": "function", "doc": "<p>Calculate the great-circle distance between two points\non the earth (specified in decimal degrees)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitudes1</span>, </span><span class=\"param\"><span class=\"n\">longitudes1</span>, </span><span class=\"param\"><span class=\"n\">latitudes2</span>, </span><span class=\"param\"><span class=\"n\">longitudes2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_sin.test_alg_geolocate_sin", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_geolocate_sin", "qualname": "test_alg_geolocate_sin", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_geolocate_lrm.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span>, </span><span class=\"param\"><span class=\"n\">l2i_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_identify_file", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_identify_file", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_identify_file.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_identify_file.test_alg_identify_file", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_identify_file", "qualname": "test_alg_identify_file", "kind": "function", "doc": "<p>test of Algorithm in clev2er.algorithms.cryotempo.alg_identify_file.py\nLoad a LRM, SIN, and SAR L1b file\nrun Algorthm.process() on each\ntest that it identifies the file as LRM, or SIN, and returns (True,'')\nor (False,'SKIP_OK..') for SAR</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_product_output", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_product_output", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_product_output.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_product_output.test_alg_product_output", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_product_output", "qualname": "test_alg_product_output", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_product_output.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_ref_dem", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_ref_dem", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_ref_dem.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_ref_dem.test_alg_ref_dem", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_ref_dem", "qualname": "test_alg_ref_dem", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_template.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_retrack", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_retrack", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_retrack.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_retrack.test_alg_retrack", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_retrack", "qualname": "test_alg_retrack", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_retrack.py</p>\n\n<p>runs retracker algorithm on an LRM and SIN L1b file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_skip_on_area_bounds", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_skip_on_area_bounds", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_skip_on_area_bounds.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_skip_on_area_bounds.test_alg_skip_on_area_bounds", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_skip_on_area_bounds", "qualname": "test_alg_skip_on_area_bounds", "kind": "function", "doc": "<p>test of Algorithm in clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_skip_on_mode", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_skip_on_mode", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_skip_on_mode.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_skip_on_mode.test_alg_skip_on_mode", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_skip_on_mode", "qualname": "test_alg_skip_on_mode", "kind": "function", "doc": "<p>test of Algorithm in clev2er.algorithms.cryotempo.alg_skip_on_mode.py\nLoad a LRM, SIN, and SAR L1b file\nrun Algorthm.process() on each\ntest that it identifies the file as LRM, or SIN, and returns (True,'')\nor (False,'SKIP_OK..') for SAR</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_surface_type", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_surface_type", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_surface_type.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_surface_type.test_alg_skip_on_area_bounds", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_surface_type", "qualname": "test_alg_skip_on_area_bounds", "kind": "function", "doc": "<p>test of Algorithm in clev2er.algorithms.cryotempo.alg_surface_type.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_uncertainty", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_uncertainty", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.cryotempo.alg_uncertainty.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_alg_uncertainty.test_alg_uncertainty", "modulename": "clev2er.algorithms.cryotempo.tests.test_alg_uncertainty", "qualname": "test_alg_uncertainty", "kind": "function", "doc": "<p>test of clev2er.algorithms.cryotempo.alg_uncertainty.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_find_lrm", "modulename": "clev2er.algorithms.cryotempo.tests.test_find_lrm", "kind": "module", "doc": "<p>test of find_lrm.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_find_lrm.test_find_lrm", "modulename": "clev2er.algorithms.cryotempo.tests.test_find_lrm", "qualname": "test_find_lrm", "kind": "function", "doc": "<p>test the clev2er.algorithms.cryotempo.find_lrm.FileFinder class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_find_sin", "modulename": "clev2er.algorithms.cryotempo.tests.test_find_sin", "kind": "module", "doc": "<p>test of find_sin.py</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.tests.test_find_sin.test_find_sin", "modulename": "clev2er.algorithms.cryotempo.tests.test_find_sin", "qualname": "test_find_sin", "kind": "function", "doc": "<p>test the clev2er.algorithms.cryotempo.find_sin.FileFinder class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.inlandwaters", "modulename": "clev2er.algorithms.inlandwaters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.algorithms.landice", "modulename": "clev2er.algorithms.landice", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.algorithms.landice.alg1", "modulename": "clev2er.algorithms.landice.alg1", "kind": "module", "doc": "<p>clev2er.algorithms.algorithm_template</p>\n"}, {"fullname": "clev2er.algorithms.landice.alg1.Algorithm", "modulename": "clev2er.algorithms.landice.alg1", "qualname": "Algorithm", "kind": "class", "doc": "<p>Clev2er  algorithm</p>\n"}, {"fullname": "clev2er.algorithms.landice.alg1.Algorithm.__init__", "modulename": "clev2er.algorithms.landice.alg1", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.landice.alg1.Algorithm.process", "modulename": "clev2er.algorithms.landice.alg1", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>working (dict):</strong>  working data passed between algorithms</li>\n<li><strong>mplog:</strong>  logging instance</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l1b</span>, </span><span class=\"param\"><span class=\"n\">working</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.landice.alg1.Algorithm.finalize", "modulename": "clev2er.algorithms.landice.alg1", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.landice.alg2", "modulename": "clev2er.algorithms.landice.alg2", "kind": "module", "doc": "<p>clev2er.algorithms.algorithm_template</p>\n"}, {"fullname": "clev2er.algorithms.landice.alg2.Algorithm", "modulename": "clev2er.algorithms.landice.alg2", "qualname": "Algorithm", "kind": "class", "doc": "<p>Clev2er  algorithm</p>\n"}, {"fullname": "clev2er.algorithms.landice.alg2.Algorithm.__init__", "modulename": "clev2er.algorithms.landice.alg2", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.landice.alg2.Algorithm.process", "modulename": "clev2er.algorithms.landice.alg2", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>working (dict):</strong>  working data passed between algorithms</li>\n<li><strong>mplog:</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l1b</span>, </span><span class=\"param\"><span class=\"n\">working</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.landice.alg2.Algorithm.finalize", "modulename": "clev2er.algorithms.landice.alg2", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.templates", "modulename": "clev2er.algorithms.templates", "kind": "module", "doc": "<p>This directory contains <em>algorithm template.py</em> which should be the <em>basis</em> for\nall new algorithms in the CLEV2ER project.</p>\n\n<p>The <code>clev2er.algorithms.templates.algorithm_template.Algorithm</code> class contains the \ntemplate algorithm code.</p>\n\n<p>The <code>clev2er.algorithms.templates.algorithm_template.test</code> module contains \nthe unit tests for the algorithm template code.</p>\n"}, {"fullname": "clev2er.algorithms.templates.tests", "modulename": "clev2er.algorithms.templates.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.algorithms.testchain", "modulename": "clev2er.algorithms.testchain", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.algorithms.testchain.alg_template1", "modulename": "clev2er.algorithms.testchain.alg_template1", "kind": "module", "doc": "<p>clev2er.algorithms.testchain.alg_template1.py</p>\n\n<p>Algorithm class module, used to implement a single chain algorithm</p>\n\n<h1 id=\"description-of-this-algorithms-purpose\">Description of this Algorithm's purpose</h1>\n\n<p>This is an example Algorithm which should be used as a template\nfor other Algorithm modules. </p>\n\n<p>As an example this Algorithm calculates 2 x the L1b ocean tide parameter\nand saves it in the shared_dict as shared_dict[\"twice_ocean_tide_01\"]</p>\n\n<h1 id=\"main-initialization-init-function-stepsresources-required\">Main initialization (init() function) steps/resources required</h1>\n\n<p>None</p>\n\n<h1 id=\"main-process-function-steps\">Main process() function steps</h1>\n\n<p>Calculates 2 x the L1b ocean_tide_01 parameter as an example</p>\n\n<h1 id=\"contribution-to-shared_dict\">Contribution to shared_dict</h1>\n\n<p>shared_dict[\"twice_ocean_tide_01\"] (np.array[int]) : example contains 2 x the L1b ocean_tide_01 \n                                                     parameter</p>\n\n<h1 id=\"requires-from-shared_dict\">Requires from shared_dict</h1>\n\n<p>None</p>\n"}, {"fullname": "clev2er.algorithms.testchain.alg_template1.Algorithm", "modulename": "clev2er.algorithms.testchain.alg_template1", "qualname": "Algorithm", "kind": "class", "doc": "<p>CLEV2ER Algorithm class</p>\n\n<p>contains:\n     .log (Logger) : log instance that must be used for all logging, set by BaseAlgorithm\n     .config (dict) : configuration dictionary, set by BaseAlgorithm\n     - functions that need completing:\n     .init() : Algorithm initialization function (run once at start of chain)\n     .process(l1b,shared_dict) : Algorithm processing function (run on every L1b file)\n     .finalize() : Algorithm finalization/closure function (run after all chain\n                   processing completed)</p>\n\n<p>Inherits from BaseAlgorithm which handles interaction with the chain controller run_chain.py</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.testchain.alg_template1.Algorithm.init", "modulename": "clev2er.algorithms.testchain.alg_template1", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization function</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<p>Test for KeyError or OSError exceptions and raise them if found\nrather than just returning (False,\"error description\")</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  for keys not found in self.config</li>\n<li><strong>OSError :</strong>  for any file related errors</li>\n</ul>\n\n<p>Note:</p>\n\n<ul>\n<li>retrieve required config data from self.config dict</li>\n<li>log using self.log.info(), or self.log.error() or self.log.debug()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.testchain.alg_template1.Algorithm.process", "modulename": "clev2er.algorithms.testchain.alg_template1", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function, called for every L1b file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms. Use this dict\nto pass algorithm results down the chain or read variables\nset by other algorithms.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>Note:</p>\n\n<ul>\n<li>retrieve required config data from self.config dict (read-only)</li>\n<li>retrieve data from other algorithms from shared_dict</li>\n<li>add results,variables from this algorithm to shared_dict</li>\n<li>log using self.log.info(), or self.log.error() or self.log.debug()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.testchain.alg_template1.Algorithm.finalize", "modulename": "clev2er.algorithms.testchain.alg_template1", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Algorithm finalization function - called after all processing completed</p>\n\n<p>Can be used to clean up/free resources initialized in the init() function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  this sets the stage when this function is called\nby the chain controller. Useful during multi-processing.\nDefaults to 0. Not normally used by Algorithms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.testchain.alg_template2", "modulename": "clev2er.algorithms.testchain.alg_template2", "kind": "module", "doc": "<p>clev2er.algorithms.testchain.alg_template2.py</p>\n\n<p>Algorithm class module, used to implement a single chain algorithm</p>\n\n<h1 id=\"description-of-this-algorithms-purpose\">Description of this Algorithm's purpose</h1>\n\n<p>This is an example Algorithm which should be used as a template\nfor other Algorithm modules.</p>\n\n<h1 id=\"main-initialization-init-function-stepsresources-required\">Main initialization (init() function) steps/resources required</h1>\n\n<p>None</p>\n\n<h1 id=\"main-process-function-steps\">Main process() function steps</h1>\n\n<p>Calculates 2 x the L1b ocean_tide_01 parameter as an example</p>\n\n<h1 id=\"contribution-to-shared_dict\">Contribution to shared_dict</h1>\n\n<p>shared_dict[\"twice_ocean_tide_01\"] (np.array[int]) : example contains 2 x the L1b ocean_tide_01 \n                                                     parameter</p>\n\n<h1 id=\"requires-from-shared_dict\">Requires from shared_dict</h1>\n\n<p>None</p>\n"}, {"fullname": "clev2er.algorithms.testchain.alg_template2.Algorithm", "modulename": "clev2er.algorithms.testchain.alg_template2", "qualname": "Algorithm", "kind": "class", "doc": "<p>CLEV2ER Algorithm class</p>\n\n<p>contains:\n     .log (Logger) : log instance that must be used for all logging, set by BaseAlgorithm\n     .config (dict) : configuration dictionary, set by BaseAlgorithm\n     - functions that need completing:\n     .init() : Algorithm initialization function (run once at start of chain)\n     .process(l1b,shared_dict) : Algorithm processing function (run on every L1b file)\n     .finalize() : Algorithm finalization/closure function (run after all chain\n                   processing completed)</p>\n\n<p>Inherits from BaseAlgorithm which handles interaction with the chain controller run_chain.py</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.testchain.alg_template2.Algorithm.init", "modulename": "clev2er.algorithms.testchain.alg_template2", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization function</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<p>Test for KeyError or OSError exceptions and raise them if found\nrather than just returning (False,\"error description\")</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  for keys not found in self.config</li>\n<li><strong>OSError :</strong>  for any file related errors</li>\n</ul>\n\n<p>Note:</p>\n\n<ul>\n<li>retrieve required config data from self.config dict</li>\n<li>log using self.log.info(), or self.log.error() or self.log.debug()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.testchain.alg_template2.Algorithm.process", "modulename": "clev2er.algorithms.testchain.alg_template2", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function, called for every L1b file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms. Use this dict\nto pass algorithm results down the chain or read variables\nset by other algorithms.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>Note:</p>\n\n<ul>\n<li>retrieve required config data from self.config dict (read-only)</li>\n<li>retrieve data from other algorithms from shared_dict</li>\n<li>add results,variables from this algorithm to shared_dict</li>\n<li>log using self.log.info(), or self.log.error() or self.log.debug()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.testchain.alg_template2.Algorithm.finalize", "modulename": "clev2er.algorithms.testchain.alg_template2", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Algorithm finalization function - called after all processing completed</p>\n\n<p>Can be used to clean up/free resources initialized in the init() function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  this sets the stage when this function is called\nby the chain controller. Useful during multi-processing.\nDefaults to 0. Not normally used by Algorithms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.testchain.tests", "modulename": "clev2er.algorithms.testchain.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.algorithms.testchain.tests.test_alg_template1", "modulename": "clev2er.algorithms.testchain.tests.test_alg_template1", "kind": "module", "doc": "<p>pytest of algorithm\nclev2er.algorithms.testchain.alg_template1.py</p>\n"}, {"fullname": "clev2er.algorithms.testchain.tests.test_alg_template1.test_alg_template1", "modulename": "clev2er.algorithms.testchain.tests.test_alg_template1", "qualname": "test_alg_template1", "kind": "function", "doc": "<p>test of clev2er.algorithms.testchain.alg_template1.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1b_file</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools", "modulename": "clev2er.tools", "kind": "module", "doc": "<h2 id=\"tools-directory\">Tools Directory</h2>\n\n<p>This directory contains command-line tools required to run the chains.</p>\n\n<h3 id=\"tools-list\">Tools List</h3>\n\n<ul>\n<li><code>clev2er.tools.run_chain</code></li>\n</ul>\n\n<h3 id=\"example-of-running-the-chain\">Example of Running the Chain</h3>\n\n<p>This example runs the processing chain <em>cryotempo</em> on every L1b file in \n/path/to/l1b_files. It uses all the default configuration files for that chain.</p>\n\n<pre><code>cd $CLEV2ER_BASE_DIR/src/clev2er/tools\npython run_chain.py --name cryotempo -d /path/to/l1b_files\n</code></pre>\n\n<p>To find all the current command line options for <em>run_chain.py</em>, type:  </p>\n\n<p><code>run_chain.py --help</code></p>\n\n<table>\n<thead>\n<tr>\n  <th>Argument</th>\n  <th>Short Arg</th>\n  <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>--name</td>\n  <td>-n</td>\n  <td>name (str) : chain name</td>\n</tr>\n<tr>\n  <td>--alglist</td>\n  <td>-a</td>\n  <td>[Optional, str] path of algorithm list YML file. Default is ${CLEV2ER_BASE_DIR}/config/algorithm_lists/<em>chainname</em>.yml</td>\n</tr>\n<tr>\n  <td>--conf</td>\n  <td>-c</td>\n  <td>[Optional, str] path of main XML configuration file. Default is $CLEV2ER_BASE_DIR/config/main_config.xml</td>\n</tr>\n<tr>\n  <td>--baseline</td>\n  <td>-b</td>\n  <td>[Optional, char] baseline of chain. Single uppercase char. Default=A. Used to specify the chain config file, where config file = $CLEV2ER_BASE_DIR/config/chain_configs/*chainname*_<em>BVVV</em>.yml</td>\n</tr>\n<tr>\n  <td>--version</td>\n  <td>-v</td>\n  <td>[Optional, char] version of chain. integer 1-100. Default=1. Used to specify the chain config file, where config file = $CLEV2ER_BASE_DIR/config/chain_configs/*chainname*_<em>BVVV</em>.yml</td>\n</tr>\n<tr>\n  <td>--file</td>\n  <td>-f</td>\n  <td>[Optional, str] path of input L1b file</td>\n</tr>\n<tr>\n  <td>--dir</td>\n  <td>-d</td>\n  <td>[Optional, str] path of dir containing input L1b files</td>\n</tr>\n<tr>\n  <td>--max_files</td>\n  <td>-mf</td>\n  <td>[Optional, int] limit number of L1b files input to first n</td>\n</tr>\n<tr>\n  <td>--quiet</td>\n  <td>-q</td>\n  <td>[Optional] do not output log messages to stdout</td>\n</tr>\n<tr>\n  <td>--debug</td>\n  <td>-de</td>\n  <td>[Optional] log.DEBUG messages are output to log file, and stdout</td>\n</tr>\n<tr>\n  <td>--multiprocessing</td>\n  <td>-mp</td>\n  <td>[Optional] use multi-processing, overrides main config file setting</td>\n</tr>\n<tr>\n  <td>--sequentialprocessing</td>\n  <td>-sp</td>\n  <td>[Optional] use sequential processing, overrides main config file setting</td>\n</tr>\n<tr>\n  <td>--nprocs</td>\n  <td>-np</td>\n  <td>[Optional,int] maximum number of cores to split multi-processing on. Overrides setting in main config</td>\n</tr>\n<tr>\n  <td>--sharedmem</td>\n  <td>-sm</td>\n  <td>[Optional] use shared memory when multi-processing is enabled. Experimental feature</td>\n</tr>\n<tr>\n  <td>--stop_on_error</td>\n  <td>-st</td>\n  <td>[Optional] stop chain on first error. Default is set in main config file</td>\n</tr>\n<tr>\n  <td>--logstring</td>\n  <td>-ls</td>\n  <td>[Optional, str] append this string to log file names for this run, as <logfilename>_<this_string>.log</td>\n</tr>\n<tr>\n  <td>--year</td>\n  <td>-y</td>\n  <td>[Optional, int] year number (YYYY) to use to select L1b files. The year number is used by the chain's finder</td>\n</tr>\n<tr>\n  <td>--month</td>\n  <td>-m</td>\n  <td>[Optional, int] month number (1,12) to use to select L1b files. The month number is used by the chain's finder algorithms if they support month selections</td>\n</tr>\n<tr>\n  <td>--conf_opts</td>\n  <td>-co</td>\n  <td>[Optional, str,str,..]  Comma separated list of key:key:value pairs to pass to the chain. The number of keys is dependent on the configuration levels. If value is a boolean then use key:true or key:false. Single level keys without a value equate to true. Example that changes two settings: -co chain:use_multi_processing:false,lrm_only</td>\n</tr>\n<tr>\n  <td>--cs2testdir</td>\n  <td>-ct</td>\n  <td>[Optional] for quick CS2 tests, uses default CS2 L1b directory: $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles</td>\n</tr>\n</tbody>\n</table>\n"}, {"fullname": "clev2er.tools.run_chain", "modulename": "clev2er.tools.run_chain", "kind": "module", "doc": "<p>Main command line run control tool for CLEV2ER algorithm framework chains</p>\n\n<h6 id=\"setup-requires\">Setup requires:</h6>\n\n<blockquote>\n  <p>Set CLEV2ER_BASE_DIR to point to the base directory of the CLEV2ER framework\n      export CLEV2ER_BASE_DIR=/Users/alanmuir/software/clev2er</p>\n  \n  <p>PYTHONPATH to include $CLEV2ER_BASE_DIR/src\n      export PYTHONPATH=$PYTHONPATH:$CLEV2ER_BASE_DIR/src</p>\n</blockquote>\n\n<h6 id=\"example-usage\">Example usage:</h6>\n\n<blockquote>\n  <p>To list all command line options:</p>\n  \n  <p><code>python run_chain.py -h</code></p>\n  \n  <p>b) Run the cryotempo land ice chain on a single L2b file:</p>\n  \n  <p><code>python run_chain.py --name cryotempo -f         $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles/            CS_OFFL_SIR_LRM_1B_20200930T235609_20200930T235758_D001.nc</code></p>\n  \n  <p>a) Run the cryotempo land ice chain on all l1b files in \n     $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles</p>\n  \n  <p><code>python run_chain.py --name cryotempo --dir $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles</code></p>\n  \n  <p>Run with multi-processing and shared memory enabled (also can set these in main config):</p>\n  \n  <p><code>python run_chain.py --name cryotempo -d $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles -sm -mp</code></p>\n</blockquote>\n"}, {"fullname": "clev2er.tools.run_chain.exception_hook", "modulename": "clev2er.tools.run_chain", "qualname": "exception_hook", "kind": "function", "doc": "<p>log Exception traceback output to the error log, instead of just to the console\nWithout this, these error can get missed when the console is not checked</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exc_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"ne\">BaseException</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exc_value</span><span class=\"p\">:</span> <span class=\"ne\">BaseException</span>,</span><span class=\"param\">\t<span class=\"n\">exc_traceback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">traceback</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.custom_key", "modulename": "clev2er.tools.run_chain", "qualname": "custom_key", "kind": "function", "doc": "<p>search function to find N in line containing [fN]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>line (str):</strong>  string containing [fN], where N is an int which may be large</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>N or 0 if not matched</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.sort_file_by_number", "modulename": "clev2er.tools.run_chain", "qualname": "sort_file_by_number", "kind": "function", "doc": "<p>sort log file by N , where log lines contain the string [fN]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  log file path</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.insert_txtfile1_in_txtfile2_after_line_containing_string", "modulename": "clev2er.tools.run_chain", "qualname": "insert_txtfile1_in_txtfile2_after_line_containing_string", "kind": "function", "doc": "<p>Inserts txtfile1 in txtfile2 after line containing target_string</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file1 (str):</strong>  path of txt file1</li>\n<li><strong>file2 (str):</strong>  path of txt file2</li>\n<li><strong>target_string (str):</strong>  string to search for in file2 and insert contents of file1 after</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">target_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.append_file", "modulename": "clev2er.tools.run_chain", "qualname": "append_file", "kind": "function", "doc": "<p>appends contents of file1_path to end of  file2_path</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file1_path (str):</strong>  txt file to append</li>\n<li><strong>file2_path (str):</strong>  txt file to append to end of</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file1_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file2_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.remove_strings_from_file", "modulename": "clev2er.tools.run_chain", "qualname": "remove_strings_from_file", "kind": "function", "doc": "<p>removes any string [fN] from the txt file</p>\n\n<pre><code>where N is any integer\n</code></pre>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  file name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.run_chain_on_single_file", "modulename": "clev2er.tools.run_chain", "qualname": "run_chain_on_single_file", "kind": "function", "doc": "<p>Runs the algorithm chain on a single L1b file.</p>\n\n<p>This function is run in a separate process if multi-processing is enabled.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b_file (str):</strong>  path of L1b file to process</li>\n<li><strong>alg_object_list (list[Algorithm]):</strong>  list of Algorithm objects</li>\n<li><strong>log (logging.Logger):</strong>  logging instance to use</li>\n<li><strong>log_queue (Queue):</strong>  Queue for multi-processing logging</li>\n<li><strong>rval_queue (Queue) :</strong>  Queue for multi-processing results</li>\n<li><strong>filenum (int) :</strong>  file number being processed</li>\n<li><strong>breakpoint_alg_name (str) :</strong>  if not '', name of algorithm to break after.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple(bool,str,str):\n  : algorithms success (True) or Failure (False),\n  : '' or error string\n  : path of breakpoint file or ''\n  for multi-processing return values are instead queued -> rval_queue for this process</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">alg_object_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">log_queue</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">bound</span> <span class=\"n\">method</span> <span class=\"n\">BaseContext</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"n\">of</span> <span class=\"o\">&lt;</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">DefaultContext</span> <span class=\"nb\">object</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rval_queue</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">bound</span> <span class=\"n\">method</span> <span class=\"n\">BaseContext</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"n\">of</span> <span class=\"o\">&lt;</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">DefaultContext</span> <span class=\"nb\">object</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">breakpoint_alg_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.mp_logger_process", "modulename": "clev2er.tools.run_chain", "qualname": "mp_logger_process", "kind": "function", "doc": "<p>executed in a separate process that performs logging\n   used for when multi-processing only</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>queue (Queue):</strong>  object created by multiprocessing.Queue()</li>\n<li><strong>config (dict):</strong>  main config dictionary for log file paths</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">queue</span>, </span><span class=\"param\"><span class=\"n\">config</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.run_chain", "modulename": "clev2er.tools.run_chain", "qualname": "run_chain", "kind": "function", "doc": "<p>Run the algorithm chain in algorithm_list on each L1b file in l1b_file_list\n   using the configuration settings in config</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b_file_list (list[str]):</strong>  list of l1b files paths to process</li>\n<li><strong>config (dict):</strong>  configuration dictionary. This is the named chain config and the\nmain config merged</li>\n<li><strong>algorithm_list (list[str]):</strong>  list of algorithm names</li>\n<li><strong>log (logging.Logger):</strong>  log instance to use</li>\n<li><strong>breakpoint_alg_name (str):</strong>  name of algorithm to set break point after.\nDefault='' (no breakpoint set here)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(bool,int,int, int,str) : (chain success or failure, number_of_errors,\n                            number of files processed, number of files skipped\n                            (for valid reasons), breakpoint filename)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b_file_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">algorithm_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">breakpoint_alg_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.main", "modulename": "clev2er.tools.run_chain", "qualname": "main", "kind": "function", "doc": "<p>main function for tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.tests", "modulename": "clev2er.tools.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.tools.tests.test_run_chain", "modulename": "clev2er.tools.tests.test_run_chain", "kind": "module", "doc": "<p>pytest functions to test\nsrc/clev2er/tools/run_chain.py: runc_chain()</p>\n"}, {"fullname": "clev2er.tools.tests.test_run_chain.test_run_chain", "modulename": "clev2er.tools.tests.test_run_chain", "qualname": "test_run_chain", "kind": "function", "doc": "<p>pytest functions to test src/clev2er/tools/run_chain.py: run_chain()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mp_enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils", "modulename": "clev2er.utils", "kind": "module", "doc": "<p><strong>Utility Modules</strong></p>\n"}, {"fullname": "clev2er.utils.areas", "modulename": "clev2er.utils.areas", "kind": "module", "doc": "<h1 id=\"area-definitions-and-map-plotting\">Area Definitions and Map Plotting</h1>\n\n<p>Contains utility classes to handle plotting of predefined polar (or other) areas</p>\n\n<h2 id=\"area-definitions\">Area Definitions</h2>\n\n<p>Area definitions define</p>\n\n<ul>\n<li>Area projection</li>\n<li>Area extent</li>\n<li>Data mask applied when plotting data over the area</li>\n<li>Plot background</li>\n</ul>\n\n<h6 id=\"area-definitions-are-each-stored-in-a-python-dictionary-within-a-separate-file\">Area definitions are each stored in a python dictionary within a separate file:</h6>\n\n<blockquote>\n  <p>$CLEV2ER_BASE_DIR/src/clev2er/utils/areas/definitions/<strong>area_name.py</strong></p>\n</blockquote>\n\n<p>The area naming convention used is as follows:</p>\n\n<p><strong>area</strong>&#95;<em>background</em>&#95;<em>datamask</em>.py  where <em>background</em> and <em>datamask</em> are optional.</p>\n\n<table>\n<thead>\n<tr>\n  <th>area_name</th>\n  <th>Background</th>\n  <th>Mask</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>antarctica</td>\n  <td>basic_land</td>\n  <td>None</td>\n</tr>\n<tr>\n  <td>antarctica_is</td>\n  <td>basic_land</td>\n  <td>antarctica_bedmachine_v2_grid_mask[2,4] == grounded ice sheet</td>\n</tr>\n<tr>\n  <td>antarctica_fi</td>\n  <td>basic_land</td>\n  <td>floating ice only : bedmachine mask</td>\n</tr>\n<tr>\n  <td>antarctica_hs_is</td>\n  <td>hillshade</td>\n  <td>antarctica_bedmachine_v2_grid_mask[2,4] == grounded ice sheet</td>\n</tr>\n<tr>\n  <td>antarctica_hs_fi</td>\n  <td>hillshade</td>\n  <td>floating ice only : bedmachine mask</td>\n</tr>\n<tr>\n  <td>greenland</td>\n  <td>basic_land</td>\n  <td>None</td>\n</tr>\n<tr>\n  <td>greenland_is</td>\n  <td>basic_land</td>\n  <td>antarctica_bedmachine_v2_grid_mask[2,4] == grounded ice sheet</td>\n</tr>\n<tr>\n  <td>greenland_fi</td>\n  <td>basic_land</td>\n  <td>floating ice only : bedmachine mask</td>\n</tr>\n<tr>\n  <td>greenland_hs_is</td>\n  <td>hillshade</td>\n  <td>antarctica_bedmachine_v2_grid_mask[2,4] == grounded ice sheet</td>\n</tr>\n<tr>\n  <td>greenland_hs_fi</td>\n  <td>hillshade</td>\n  <td>floating ice only : bedmachine mask</td>\n</tr>\n</tbody>\n</table>\n"}, {"fullname": "clev2er.utils.areas.area_plot", "modulename": "clev2er.utils.areas.area_plot", "kind": "module", "doc": "<p>clev2er.utils.areas.area_plot.py\nclass to plot areas defined in clev2er.utils.areas.definitions</p>\n\n<p>To do reminder:</p>\n\n<p>TODO: doc in __init__.py\nTODO: grid support</p>\n"}, {"fullname": "clev2er.utils.areas.area_plot.get_unique_colors", "modulename": "clev2er.utils.areas.area_plot", "qualname": "get_unique_colors", "kind": "function", "doc": "<p>get a list of n unique colors for plotting flag data (when no colors are\n   provided, as sampled from the tab20 or tab10 colormap</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n (int):</strong>  number of colors required (&lt;= 20 will provide unique colors</li>\n<li>otherwise some repetition)</li>\n<li><strong>cmap_name_override (str):</strong>  override colormap name to use, Typical alternatives are\n\"tab10\", \"tab20b\", \"tab20c\", and \"Set1\", \"Set2\",\"Set3\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Tuple[float,float,float,float]]: list of color RGBA</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">cmap_name_override</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.calculate_mad", "modulename": "clev2er.utils.areas.area_plot", "qualname": "calculate_mad", "kind": "function", "doc": "<p>Calculate the MAD (Mean Absolute Deviation) of values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (np.ndarray):</strong>  values for which MAD is to be calculated</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mad (float) : MAD value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Annotation", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Annotation", "kind": "class", "doc": "<p>Data class for a single annotation in a polar plot.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>xpos (float):</strong>  The x-coordinate position of the annotation text in axis coordinates (0-1),\nrepresenting the percentage of the axis width.</li>\n<li><strong>ypos (float):</strong>  The y-coordinate position of the annotation text in axis coordinates (0-1),\nrepresenting the percentage of the axis height.</li>\n<li><strong>text (str):</strong>  The content of the annotation text.</li>\n<li><strong>bbox (dict | None):</strong>  An optional bounding box around the text. If provided, it should be a\ndictionary specifying the style of the box. Default is None, meaning no\nbox. Example format:\n    {\n        'boxstyle': 'round',  # Style of the box (e.g.,'round','square')\n        'facecolor': 'aliceblue',  # Background color of the box\n        'alpha': 1.0,  # Transparency of the box (0-1)\n        'edgecolor': 'lightgrey',  # Color of the box edge\n    }\nSee matplotlib Boxstyle documentation for more styles.</li>\n<li><strong>fontsize (int):</strong>  The font size of the text. Default is 12.</li>\n<li><strong>color (str):</strong>  The color of the text. Default is \"k\" (black).</li>\n<li><strong>fontweight (str):</strong>  The weight (thickness) of the font. Default is \"normal\".</li>\n</ul>\n"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot", "kind": "class", "doc": "<p>class to create map plots of polar areas</p>\n"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.__init__", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.__init__", "kind": "function", "doc": "<p>class inititialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>area (str):</strong>  area name as per clev2er.utils.areas.definitions</li>\n<li><strong>area_overrides (dict|None):</strong>  dictionary to override area dict definitions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">area</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">area_overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.plot_points", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.plot_points", "kind": "function", "doc": "<p>function to plot one or more (lat,lon,val) datasets on polar maps</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*data_sets (dict, optional) :</strong>  data set dictionaries (you can have more than\none dataset plotted by providing dataset1_dict,dataset2_dict2,...)\nEach dictionary contains the (lats,lons,vals) for a data set, and\nthe optional tunable plot parameters for that data set only.\nEach data_set should consist of\n{\n    # Required key/vals:\n    \"lats\": np.array([]),\n    \"lons\": np.array([]),\n    \"vals\": np.array([]),\n    #-----------------------------------------------\n    # Optional, otherwise default values are used.\n    #-----------------------------------------------\n    \"units\": '', # units of vals\n    \"name\": \"unnamed\", # str name of vals. Used to label plot.\n                             # 'unnamed' is used if not provided.\n    \"apply_area_mask_to_data\": True, # bool, whether to apply the default area's\n                                    # data Mask to this data set\n    # --- flagging bad data for this data set, plotted in mini-map\n    \"fill_value\": 9999, # fill value in vals to be ignored or None\n    \"valid_range\": [min,max],# [min,max] or None. allowed vals range. flagged as\n                             # bad outside this range.\n                             # default is actual min,max of vals\n    \"minimap_val_scalefactor\": 1.,# (float) scale the default\n                                  # plot marker for bad data\n    # -- flag type data settings --------------------------------\n    \"flag_values\": [], # list of flag values. If used vals treated as flag data\n    \"flag_names\": [], # list of flag names\n    \"flag_colors\": [] # list of flag colors or colormap name to sample\n    # --- color map, color bar\n    \"cmap_name\": \"RdYlBu_r\", # colormap name to use for this dataset\n    \"cmap_over_color\": \"#A85754\" or None\n    \"cmap_under_color\": \"#3E4371\"  or None\n    \"cmap_extend\": \"both\" # 'neither','min', 'max','both'\n    \"min_plot_range\": None, # set the minimum range for the colorbar.\n                       # if not set min(vals) will be used\n    \"max_plot_range\": None, # set the maximum range for the colorbar\n    # --- point size, alpha\n    \"plot_size_scale_factor\": 1., # (float) scale the default plot marker\n    \"plot_alpha\": 1.0, # transparency of this dataset plot (0..1)\n}</li>\n<li><strong>use_default_annotation (bool):</strong>  if True display default dataset annotation else do not</li>\n<li><strong>annotation_list (list[Annotation]|None, optional):</strong>  list of Annotation objects to display</li>\n<li><strong>logo_image (,optional):</strong>  logo image to insert in plot as returned by\nplt.imread('someimagefile.png')</li>\n<li><strong>logo_position (list,optional) :</strong>  logo position as an axis rect list:\n[left, bottom, width, height] , each are 0..1</li>\n<li><strong>output_dir (str,optional):</strong>   output directory to save plots instead of displaying them.\nif output_file not specified, plot saved with name of 1st data_set and\narea: <output_dir>/param_<data_set['name']&gt;_<self.area>.png</li>\n<li><strong>output_file (str,optional):</strong>  optionally override default output plot .png filename.\nif output_dir specified, saved as <output_dir>/output_file\nif no output_dir than output_file should contain the full path</li>\n<li><strong>dpi (int,optional):</strong>  dpi to save image, default=85</li>\n<li><strong>transparent_background (bool, optional):</strong>  set to have transparent background when saved\nas png</li>\n<li><strong>map_only (bool):</strong>  plot just the map plot (+ colorbar). No histograms or other elements.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if data_set parameters (lat,lon,vals) do not have equal length</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">data_sets</span>,</span><span class=\"param\">\t<span class=\"n\">use_default_annotation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">clev2er</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">areas</span><span class=\"o\">.</span><span class=\"n\">area_plot</span><span class=\"o\">.</span><span class=\"n\">Annotation</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logo_image</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logo_position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dpi</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">85</span>,</span><span class=\"param\">\t<span class=\"n\">transparent_background</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">map_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_stats", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_stats", "kind": "function", "doc": "<p>plot stats info (min,max,mean,std,MAD,nvals) of vals\n   positioned around colorbar axes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cbar (Axes):</strong>  colorbar axes instance</li>\n<li><strong>vals (np.ndarray):</strong>  values array (after Nan filtering) used to calculate and draw stats\ninfo</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cbar</span>, </span><span class=\"param\"><span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_minimap_bad", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_minimap_bad", "kind": "function", "doc": "<p>draw a minimap to show Nan, FV and out of range values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent_valid (float):</strong>  percent of valid data in area</li>\n<li><strong>nan_lats (np.ndarray):</strong>  latitude locations corresponding to Nan data</li>\n<li><strong>nan_lons (np.ndarray):</strong>  longitude locations corresponding to Nan data</li>\n<li><strong>percent_nan (float):</strong>  percent of Nan values in area</li>\n<li><strong>fv_lats (np.ndarray):</strong>  latitude locations corresponding to FV data</li>\n<li><strong>fv_lons (np.ndarray):</strong>  longitude locations corresponding to FV data</li>\n<li><strong>percent_fv (float):</strong>  percent of Fill value values in area</li>\n<li><strong>outside_lats (np.ndarray):</strong>  latitude locations corresponding to out of range data</li>\n<li><strong>outside_lons (np.ndarray):</strong>  longitude locations corresponding to out of range data</li>\n<li><strong>percent_outside (float):</strong>  percent of out of range values in area</li>\n<li><strong>dataset_params (dict):</strong>  data set parameters</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">nan_lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">nan_lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">percent_nan</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">fv_lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fv_lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">percent_fv</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">outside_lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outside_lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">percent_outside</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_minimap", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_minimap", "kind": "function", "doc": "<p>draw a minimap to show Nan, FV and out of range values</p>\n\n<p>Args:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_latitude_vs_vals_plot", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_latitude_vs_vals_plot", "kind": "function", "doc": "<p>plot latitude vs vals</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fig (Figure):</strong>  plot figure</li>\n<li><strong>vals (np.ndarray):</strong>  values to be plotted</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values in degrees</li>\n<li><strong>varname (str):</strong>  name of data set</li>\n<li><strong>units (str):</strong>  units of data set</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fig</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>,</span><span class=\"param\">\t<span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">varname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_histograms", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_histograms", "kind": "function", "doc": "<p>draw two histograms of plot range and full range</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fig (Figure):</strong>  plot figure</li>\n<li><strong>vals (np.ndarray):</strong>  values to be histogrammed</li>\n<li><strong>min_plot_range (float):</strong>  minimum plot range</li>\n<li><strong>max_plot_range (float):</strong>  maximum plot range</li>\n<li><strong>varunits (str):</strong>  units of vals</li>\n<li><strong>cmap (_type_):</strong>  colormap instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fig</span>,</span><span class=\"param\">\t<span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">min_plot_range</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_plot_range</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">varunits</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_mapscale_bar", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_mapscale_bar", "kind": "function", "doc": "<p>draw the map scale bar in km</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxis):</strong>  the main map plot axis</li>\n<li><strong>dataprj ():</strong>  the data projection</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">dataprj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_colorbar", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_colorbar", "kind": "function", "doc": "<p>draw the colorbar</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset (dict):</strong>  the data set dict</li>\n<li><strong>fig (Figure):</strong>  the plot figure</li>\n<li><strong>scatter (_type_):</strong>  _description_</li>\n<li><strong>varname (str):</strong>  name of data set</li>\n<li><strong>varunits (str):</strong>  units of data set</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>colorbar_axes(Axes): Axes instance for the colorbar</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">scatter</span>, </span><span class=\"param\"><span class=\"n\">varname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">varunits</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.plot_flag_data", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.plot_flag_data", "kind": "function", "doc": "<p>plot flag data</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fig (Figure) :</strong>  the plot figure</li>\n<li><strong>ax (GeoAxesSubplot):</strong>  the main plot axis</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>vals (np.ndarray):</strong>  data containing flag values to plot</li>\n<li><strong>data_set (dict):</strong>  the current data set</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">vals</span>, </span><span class=\"param\"><span class=\"n\">data_set</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.plot_data", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.plot_data", "kind": "function", "doc": "<p>plot lat,lon,vals, data on map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  the main plot axis</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>vals (np.ndarray):</strong>  values to plot</li>\n<li><strong>cmap_info:</strong>  (dict): colormap info</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cmap_info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">plot_size_scale_factor</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">plot_alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_gridlines", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_gridlines", "kind": "function", "doc": "<p>draw latitude and longitude grid lines on maps</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  cartopy axis</li>\n<li><strong>show_gridlines (bool):</strong> </li>\n<li><strong>gridline_color (str):</strong>  color of gridlines</li>\n<li><strong>circle (_type_):</strong>  _description_</li>\n<li><strong>draw_gridlabels (bool, optional):</strong>  _description_. Defaults to True.</li>\n<li><strong>gridlabel_color (str) :</strong>  color of grid labels</li>\n<li><strong>inner_gridlabel_color (str) :</strong>  color of inner grid labels</li>\n<li><strong>longitude_lines (List[float]|None, optional):</strong>  longitude positions for grid lines.</li>\n<li><strong>latitude_lines (List[float]|None, optional):</strong>  latitude positions for grid lines.</li>\n<li><strong>zorder (int, optional):</strong>  vertical order. Defaults to 10.</li>\n<li><strong>for_minimap (bool, optional):</strong>  if used for mini-map. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">show_gridlines</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">gridline_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">circle</span>,</span><span class=\"param\">\t<span class=\"n\">draw_gridlabels</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">gridlabel_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">inner_gridlabel_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">longitude_lines</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latitude_lines</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">for_minimap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_coastlines", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_coastlines", "kind": "function", "doc": "<p>draw coastlines over map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  matplotlib Axis</li>\n<li><strong>dataprj (_type_):</strong>  current cartopy crs</li>\n<li><strong>coastline_color (str):</strong>  coastline color to use</li>\n<li><strong>draw_coastlines (bool):</strong>   draw coastline or not</li>\n<li><strong>use_cartopy_coastline (str):</strong>  'no','low','medium','high'.</li>\n<li><strong>use_antarctica_medium_coastline (bool):</strong>  use antarctic coastline (including iceshelves)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">dataprj</span>,</span><span class=\"param\">\t<span class=\"n\">coastline_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">draw_coastlines</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_cartopy_coastline</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">use_antarctica_medium_coastline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.draw_area_polygon_mask", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.draw_area_polygon_mask", "kind": "function", "doc": "<p>if area has a data mask defined by one or more polygons, draw these on map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  cartopy axis</li>\n<li><strong>override_mask_display (bool):</strong>  if set to True (show polygon mask) or False (do not show\npolygon mask), overrides default for area</li>\n<li><strong>override_mask_color (bool):</strong>  set to a color string to override default polygon mask color\nfor area</li>\n<li><strong>dataprj (_type_):</strong>  crs returned by self.setup_projection_and_extent()</li>\n<li><strong>fill (bool, optional):</strong>  fill polygon if True. Defaults to False.</li>\n<li><strong>linestyle (str, optional):</strong>  line style to use for polygon edges. Defaults to \"-\".</li>\n<li><strong>linecolor (str, optional):</strong>  line color to use for polygon edges. Defaults to \"red\".</li>\n<li><strong>linewidth (int, optional):</strong>  line width to use for polygon edges. Defaults to 2.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">override_mask_display</span>,</span><span class=\"param\">\t<span class=\"n\">override_mask_color</span>,</span><span class=\"param\">\t<span class=\"n\">dataprj</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;-&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.area_plot.Polarplot.setup_projection_and_extent", "modulename": "clev2er.utils.areas.area_plot", "qualname": "Polarplot.setup_projection_and_extent", "kind": "function", "doc": "<p>Setup projection and extent for current Area</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>axis_position (List, optional):</strong>  [left,bottom,width,height]. Defaults to None.</li>\n<li><strong>global_view (bool, optional):</strong>  _description_. Defaults to False.</li>\n<li><strong>draw_axis_frame (bool, optional):</strong>  _description_. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>cartopy_geo_axis, data_projection_crs, circle</p>\n  \n  <p>if area has a circular border returns the circle</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axis_position</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">global_view</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">draw_axis_frame</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.areas", "modulename": "clev2er.utils.areas.areas", "kind": "module", "doc": "<p>clev2er.utils.areas.areas.py: Area class to define areas for polar plotting</p>\n"}, {"fullname": "clev2er.utils.areas.areas.list_all_area_definition_names", "modulename": "clev2er.utils.areas.areas", "qualname": "list_all_area_definition_names", "kind": "function", "doc": "<p>return a list of all area definition names</p>\n\n<p>Raises:</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.areas.Area", "modulename": "clev2er.utils.areas.areas", "qualname": "Area", "kind": "class", "doc": "<p>class to define polar areas for plotting etc</p>\n"}, {"fullname": "clev2er.utils.areas.areas.Area.__init__", "modulename": "clev2er.utils.areas.areas", "qualname": "Area.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  area name. Must be in all_areas</li>\n<li><strong>overrides (dict|None):</strong>  dictionary to override any parameters in area definition dicts</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.areas.areas.Area.load_area", "modulename": "clev2er.utils.areas.areas", "qualname": "Area.load_area", "kind": "function", "doc": "<p>Load area settings for current area name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.areas.Area.latlon_to_xy", "modulename": "clev2er.utils.areas.areas", "qualname": "Area.latlon_to_xy", "kind": "function", "doc": "<p>convert latitude and longitude to x,y in area's projection</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|float|list):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray|float|list):</strong>  longitude values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray,np.ndarray): x,y</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.areas.Area.xy_to_latlon", "modulename": "clev2er.utils.areas.areas", "qualname": "Area.xy_to_latlon", "kind": "function", "doc": "<p>convert from x,y to latitide, longitiude in area's projection</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x coordinates</li>\n<li><strong>y (np.ndarray):</strong>  y coordinates</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray,np.ndarray): latitude values, longitude values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.areas.Area.inside_xy_extent", "modulename": "clev2er.utils.areas.areas", "qualname": "Area.inside_xy_extent", "kind": "function", "doc": "<p>filter points based on x,y extent of area</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  latitude values (degs N)</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values (deg E)</li>\n<li><strong>inputs_are_xy (bool):</strong>  if True treat inputs as cartesian: x=lats, y=lons</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(lats_inside, lons_inside, x_inside, y_inside, indices_inside, n_inside):\n  lats_inside (np.ndarray): lat values inside area\n  lons_inside (np.ndarray): lon values inside area\n  x_inside (np.ndarray): projected x coords inside area\n  y_inside (np.ndarray): projected y coords inside area\n  indices_inside (np.ndarray): indices of original lats,lons that are inside\n  n_inside (int): number of original lats, lons that were inside</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.areas.Area.inside_latlon_bounds", "modulename": "clev2er.utils.areas.areas", "qualname": "Area.inside_latlon_bounds", "kind": "function", "doc": "<p>find if input latitude and longitude locations are inside area's lat/lon extent\n   bounds</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude values (degs N)</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude values (degs E)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bounded_lats|None, bounded_lons|None, bounded_indices|None, bounded_indices.size):</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.areas.Area.inside_mask", "modulename": "clev2er.utils.areas.areas", "qualname": "Area.inside_mask", "kind": "function", "doc": "<p>Find indices of x,y coords inside the area's data mask (if there is one).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x coordinates in areas's projection</li>\n<li><strong>y (np.ndarray):</strong>  y coordinates in areas's projection</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>indices_in_maskarea (np.ndarray) : indices inside mask or empty np.ndarray\n  n_inside (int) : number of points inside mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.definitions", "modulename": "clev2er.utils.areas.definitions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.antarctica", "modulename": "clev2er.utils.areas.definitions.antarctica", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "clev2er.utils.areas.definitions.antarctica_basic", "modulename": "clev2er.utils.areas.definitions.antarctica_basic", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "clev2er.utils.areas.definitions.antarctica_fi", "modulename": "clev2er.utils.areas.definitions.antarctica_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>Data mask: floating ice from bedmachine v2</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.antarctica_hs", "modulename": "clev2er.utils.areas.definitions.antarctica_hs", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>background_image: hillshade</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.antarctica_hs_fi", "modulename": "clev2er.utils.areas.definitions.antarctica_hs_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>background_image: hillshade</strong>\n<strong>Data mask: floating ice from bedmachine v2</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.antarctica_hs_is", "modulename": "clev2er.utils.areas.definitions.antarctica_hs_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>background_image: hillshade</strong>\n<strong>Data mask: grounded ice from bedmachine v2</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.antarctica_is", "modulename": "clev2er.utils.areas.definitions.antarctica_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>Data mask: grounded ice from bedmachine v2</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.arctic", "modulename": "clev2er.utils.areas.definitions.arctic", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "clev2er.utils.areas.definitions.arctic_cpy", "modulename": "clev2er.utils.areas.definitions.arctic_cpy", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: arctic\n<strong>Data mask: floating ice from bedmachine v3</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.global", "modulename": "clev2er.utils.areas.definitions.global", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "clev2er.utils.areas.definitions.greenland", "modulename": "clev2er.utils.areas.definitions.greenland", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "clev2er.utils.areas.definitions.greenland_fi", "modulename": "clev2er.utils.areas.definitions.greenland_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>Data mask: floating ice from bedmachine v3</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.greenland_hs", "modulename": "clev2er.utils.areas.definitions.greenland_hs", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>background_image: hillshade</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.greenland_hs_fi", "modulename": "clev2er.utils.areas.definitions.greenland_hs_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<em>*mask: greenland_bedmachine_v3_grid_mask[3] == floating ice *</em></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.greenland_hs_is", "modulename": "clev2er.utils.areas.definitions.greenland_hs_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>mask: greenland_bedmachine_v3_grid_mask[2] == grounded ice sheet</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.greenland_is", "modulename": "clev2er.utils.areas.definitions.greenland_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>Data mask: grounded ice from bedmachine v3</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.ronne_filchner", "modulename": "clev2er.utils.areas.definitions.ronne_filchner", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "clev2er.utils.areas.definitions.ronne_filchner_fi", "modulename": "clev2er.utils.areas.definitions.ronne_filchner_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>mask: floating ice</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.ronne_filchner_hs", "modulename": "clev2er.utils.areas.definitions.ronne_filchner_hs", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>background_image: hillshade</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.ronne_filchner_hs_fi", "modulename": "clev2er.utils.areas.definitions.ronne_filchner_hs_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>background_image: hillshade</strong>\n<strong>mask: floating ice</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.ronne_filchner_hs_is", "modulename": "clev2er.utils.areas.definitions.ronne_filchner_hs_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>background_image: hillshade</strong>\n<strong>mask: grounded ice</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.ronne_filchner_hs_isfi", "modulename": "clev2er.utils.areas.definitions.ronne_filchner_hs_isfi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner_hs\n<strong>background_image: hillshade</strong>\n<strong>mask: grounded ice+floating ice</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.ronne_filchner_is", "modulename": "clev2er.utils.areas.definitions.ronne_filchner_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>mask: grounded ice</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.ronne_filchner_isfi", "modulename": "clev2er.utils.areas.definitions.ronne_filchner_isfi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>mask: grounded ice + floating ice</strong></p>\n"}, {"fullname": "clev2er.utils.areas.definitions.spirit", "modulename": "clev2er.utils.areas.definitions.spirit", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "clev2er.utils.areas.definitions.vostok", "modulename": "clev2er.utils.areas.definitions.vostok", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "clev2er.utils.areas.tests", "modulename": "clev2er.utils.areas.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot", "modulename": "clev2er.utils.areas.tests.test_area_plot", "kind": "module", "doc": "<p>pytest of clev2er.utils.areas.area_plot</p>\n"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_area_plot_by_name", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_area_plot_by_name", "kind": "function", "doc": "<p>_summary_</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>area (str):</strong>  area name</li>\n<li><strong>southern_hemisphere (bool):</strong>  True is area is in southern hemisphere</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">area</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_area_plot_bad_latlon_data", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_area_plot_bad_latlon_data", "kind": "function", "doc": "<p>test of clev2er.utils.areas.area_plot with bad lat/lon data\nlatitude values set to Nan, None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_area_plot_bad_vals", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_area_plot_bad_vals", "kind": "function", "doc": "<p>test of clev2er.utils.areas.area_plot with bad lat/lon data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_area_plot_annotation", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_area_plot_annotation", "kind": "function", "doc": "<p>pytests for clev2er.utils.areas.area_plot</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_area_plot_good", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_area_plot_good", "kind": "function", "doc": "<p>pytests for clev2er.utils.areas.area_plot</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_area_plot_flags", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_area_plot_flags", "kind": "function", "doc": "<p>pytests for clev2er.utils.areas.area_plot</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_area_plot_grn", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_area_plot_grn", "kind": "function", "doc": "<p>pytest to test plotting over the 'greenland' area</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_area_plot_ais", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_area_plot_ais", "kind": "function", "doc": "<p>pytest to test plotting over the 'antarctica' area</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_map_only_ais", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_map_only_ais", "kind": "function", "doc": "<p>pytest to test plotting over the 'antarctica' area</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_area_plot.test_map_only_gis", "modulename": "clev2er.utils.areas.tests.test_area_plot", "qualname": "test_map_only_gis", "kind": "function", "doc": "<p>pytest to test plotting over the 'greenland' area</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_areas", "modulename": "clev2er.utils.areas.tests.test_areas", "kind": "module", "doc": "<p>pytests for clev2er.utils.areas.areas.py</p>\n"}, {"fullname": "clev2er.utils.areas.tests.test_areas.test_bad_area_name", "modulename": "clev2er.utils.areas.tests.test_areas", "qualname": "test_bad_area_name", "kind": "function", "doc": "<p>pytest to check for handling of invalid area names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_areas.test_good_area_name", "modulename": "clev2er.utils.areas.tests.test_areas", "qualname": "test_good_area_name", "kind": "function", "doc": "<p>pytest to check for handling of valid area names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.areas.tests.test_plots", "modulename": "clev2er.utils.areas.tests.test_plots", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.backgrounds", "modulename": "clev2er.utils.backgrounds", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.backgrounds.background_prep", "modulename": "clev2er.utils.backgrounds.background_prep", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.backgrounds.background_prep.create_ibcao_bg", "modulename": "clev2er.utils.backgrounds.background_prep.create_ibcao_bg", "kind": "module", "doc": "<p>Create IBCAO background from</p>\n\n<p>IBCAO_v4_2_400m.nc</p>\n\n<p>gdalwarp IBCAO_v4_2_400m.tif IBCAO_v4_2_400m_3413.tif -s_srs EPSG:3996 -t_srs EPSG:3413</p>\n\n<p>IBCAO_v4_2_400m_3413.tif</p>\n"}, {"fullname": "clev2er.utils.backgrounds.background_prep.create_ibcao_bg.get_geotiff_extent", "modulename": "clev2er.utils.backgrounds.background_prep.create_ibcao_bg", "qualname": "get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.backgrounds.backgrounds", "modulename": "clev2er.utils.backgrounds.backgrounds", "kind": "module", "doc": "<p>Class to manage background images for polar plotting</p>\n"}, {"fullname": "clev2er.utils.backgrounds.backgrounds.Background", "modulename": "clev2er.utils.backgrounds.backgrounds", "qualname": "Background", "kind": "class", "doc": "<p>class to handle background images</p>\n"}, {"fullname": "clev2er.utils.backgrounds.backgrounds.Background.__init__", "modulename": "clev2er.utils.backgrounds.backgrounds", "qualname": "Background.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  background name</li>\n<li><strong>area (str):</strong>  area name from clev2er.utils.areas.areas</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">area</span></span>)</span>"}, {"fullname": "clev2er.utils.backgrounds.backgrounds.Background.load", "modulename": "clev2er.utils.backgrounds.backgrounds", "qualname": "Background.load", "kind": "function", "doc": "<p>param: ax : axis\nparam: dataprj : cartopy coordinate reference system (crs)\nparam: background: replace default background image (thisarea.background_image) for plot\nwith one of the available backgrounds</p>\n\n<p>cartopy_stock : stock image for Cartopy, uses a downgraded natural earth image.\nOnly one resolution\ncartopy_stock_ocean : stock image for Cartopy with land blanked out in a single colour.\nOnly one resolution\narcgis_shaded_relief : resolution (low, medium, default is high) : : ArcGIS World Shaded\nRelief tiles\ngoogle_satellite : resolution (low, medium, high, vhigh, vvhigh (default)\nbluemarble : resolution (low, medium, high) : NASA Blue Marble world image\nnatural_earth_cbh : resolution (low, medium, default is high): Cross Blended Hypso with\nShaded Relief and Water\n<a href=\"https://www.naturalearthdata.com/downloads/50m-raster-data/50m-cross-blend-hypso/\">https://www.naturalearthdata.com/downloads/50m-raster-data/50m-cross-blend-hypso/</a>\nnatural_earth_cbh_oceanmasked : resolution (low, medium, default is high) : as for\nnatural_earth_cbh, but with oceans set to white\nnatural_earth_cbh_ocean : resolution (low, medium, high)\nnatural_earth_gray : resolution (low, medium, high):  Gray Earth with Shaded Relief,\nHypsography, and Ocean Bottom :\n<a href=\"https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/GRAY_50M_SR_OB.zip\">https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/GRAY_50M_SR_OB.zip</a>\nnatural_earth1 : resolution (low, medium, default is high): Natural Earth I with Shaded\nRelief and Water :\n<a href=\"https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/NE1_50M_SR_W.zip\">https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/NE1_50M_SR_W.zip</a>\nstamen : resolution (low, medium, default is high):terrain-background\n<a href=\"http://maps.stamen.com/terrain-background/#12/37.7706/-122.3782\">http://maps.stamen.com/terrain-background/#12/37.7706/-122.3782</a>\nnatural_earth_faded\nbasic_land : resolution (low, medium, high) : basic ocean and land plot\nmoa : MODIS Mosaic of Antarctica 2008-2009 (MOA2009) Image Map at 750m resolution,\ngray scale\ncpom_dem : CPOM Antarctic DEM at 1km resolution, gray scale\nhillshade : hillshade_params={\"azimuth\": f,\u201dpitch\": f,\u201ddem\": \u201cstr\u201d,\u201dalpha\": f}\nant_iceshelves\nibcso_bathymetry\nibcao_bathymetry\nawi_gis_dem : Greenland DEM from AWI 2014\ngrn_s1_mosaic : resolution (low, medium, high, vhigh)\narcticdem_1km :  ArcticDEM at 1km resolution\nrema_dem_1km : REMA Antarctic DEM at 1km resolution\n        '\nparam: resolution : 'low', 'medium','high','vhigh','vvhigh', if None,\nself.thisarea.background_image_resolution is used\nalpha:  set the background transparency (alpha), 0..1. If None,\nself.thisarea.background_image_alpha is used</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">dataprj</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">hillshade_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.backgrounds.tests", "modulename": "clev2er.utils.backgrounds.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.backgrounds.tests.test_backgrounds", "modulename": "clev2er.utils.backgrounds.tests.test_backgrounds", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.breakpoints", "modulename": "clev2er.utils.breakpoints", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.breakpoints.breakpoint_files", "modulename": "clev2er.utils.breakpoints.breakpoint_files", "kind": "module", "doc": "<p>clev2er.utils.breakpoints.breakpoint_files.py</p>\n\n<p>Functions to support writing of breakpoint files</p>\n"}, {"fullname": "clev2er.utils.breakpoints.breakpoint_files.create_netcdf_file", "modulename": "clev2er.utils.breakpoints.breakpoint_files", "qualname": "create_netcdf_file", "kind": "function", "doc": "<p>Create a NetCDF4 file from contents of a dictionary</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  _description_</li>\n<li><strong>data_dict (dict):</strong>  dictionary containing 1 or more levels</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">data_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.breakpoints.breakpoint_files.write_breakpoint_file", "modulename": "clev2er.utils.breakpoints.breakpoint_files", "qualname": "write_breakpoint_file", "kind": "function", "doc": "<p>write a netcdf breakpoint file containing contents of\n   shared dictionary</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  chain config file</li>\n<li><strong>shared_dict (dict):</strong>  shared working dictionary</li>\n<li><strong>log (logging.Logger):</strong>  current logger instance to use</li>\n<li><strong>breakpoint_alg_name (str):</strong>  name of the algorithm after which the bp is set</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str) : path of breakpoint file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">breakpoint_alg_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.breakpoints.tests", "modulename": "clev2er.utils.breakpoints.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.breakpoints.tests.test_breakpoint_files", "modulename": "clev2er.utils.breakpoints.tests.test_breakpoint_files", "kind": "module", "doc": "<p>pytest tests of clev2er.utils.breakpoints</p>\n"}, {"fullname": "clev2er.utils.breakpoints.tests.test_breakpoint_files.test_breakpoint_files", "modulename": "clev2er.utils.breakpoints.tests.test_breakpoint_files", "qualname": "test_breakpoint_files", "kind": "function", "doc": "<p>pytest function for write_breakpoint_file()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.config", "modulename": "clev2er.utils.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.config.load_config_settings", "modulename": "clev2er.utils.config.load_config_settings", "kind": "module", "doc": "<p>utils.config.load_config_settings.py</p>\n\n<p>Common functions to load chain configuration files</p>\n\n<p>load_algorithm_list(chain_name: str, baseline: str = \"\", version=0) -> list[str],list[str]\nload_config_files(chain_name: str, baseline: str = \"\") -> dict:</p>\n"}, {"fullname": "clev2er.utils.config.load_config_settings.load_algorithm_list", "modulename": "clev2er.utils.config.load_config_settings", "qualname": "load_algorithm_list", "kind": "function", "doc": "<p>load algorithm and L1b finder list for specified chain</p>\n\n<p>Lists of algorithms and finder modules are either stored in XML or YML formats</p>\n\n<p>$CLEV2ER_BASE_DIR/config/algorithm_lists/chain_name/chain_name_BVVV.[xml,.yml]</p>\n\n<p>Search rules:</p>\n\n<p>if baseline or version not specified search for the baseline or version\nwith the highest baseline char (Z highest) and then highest version number of that baseline.</p>\n\n<p>if both xml and yml files exist for the same baseline/version then the xml file\nwill have priority.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chain_name (str):</strong>  name of the chain to load</li>\n<li><strong>baseline (str, optional):</strong>  specify baseline char to use [A-Z], default is \"\" which means\nunspecified and will search for the list with the highest\n(close to Z) baseline.</li>\n<li><strong>version (int, optional):</strong>  version number 1.., default=0 (unspecified, search for highest\nversion found for baseline)</li>\n<li><strong>alg_list_file (str,optional):</strong>  path of algorithm list file to use. default=\"\" which means\nsearch for one in standard locations</li>\n<li><strong>log (logging.Logger, optional):</strong>  log instance to use, default is None (use module loggger)</li>\n</ul>\n\n<p>Raises: KeyError,ValueError,OSError,NameError</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str], list[str], str,str:\n      list of algorithm names,\n      list of finder module names - may be empty list,\n      filename of algorithm list used\n      name of algorithm to set breakpoint after or '' if no breakpoint set</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chain_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">baseline</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">alg_list_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.config.load_config_settings.load_config_files", "modulename": "clev2er.utils.config.load_config_settings", "qualname": "load_config_files", "kind": "function", "doc": "<p>function to load XML,or YML configuration files for a chain and return\n   as a python dict</p>\n\n<p>Configuration files consist of:</p>\n\n<p>$CLEV2ER_BASE_DIR/config/main_config.xml</p>\n\n<p>+</p>\n\n<p>$CLEV2ER_BASE_DIR/config/chain_configs/{chain_name}/{chain_name}_BVVV.yml\nwhere B is a char A..Z representing the baseline\nVVV is a zero padded int (1..100).\nIf not specified the highest BVVV is chosen where a config file exists</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chain_name (str) :</strong>  name of the chain to load</li>\n<li><strong>baseline (str, optional):</strong>  baseline char A..Z, default=\"\" (none specified)\nin which case the highest baseline (close to Z) is found</li>\n<li><strong>version (int):</strong>  version of config file, 1-100, def=0 (search for highest available version)</li>\n<li><strong>main_config_file (str) :</strong>  path of main chain config file, def=empty str (default path)</li>\n<li><strong>chain_config_file (str) :</strong>  path of chain config file, def=empty str\n(search highest available baseline, version)</li>\n</ul>\n\n<p>Raises: KeyError, OSError, ValueError</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(dict,str,int,str,str) : config, baseline, version, main_config_file, chain_config_file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chain_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">baseline</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">main_config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">chain_config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.config.tests", "modulename": "clev2er.utils.config.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.config.tests.test_load_algorithm_list", "modulename": "clev2er.utils.config.tests.test_load_algorithm_list", "kind": "module", "doc": "<p>pytest of utils.config.load_config_files()</p>\n"}, {"fullname": "clev2er.utils.config.tests.test_load_algorithm_list.test_load_algorithm_list", "modulename": "clev2er.utils.config.tests.test_load_algorithm_list", "qualname": "test_load_algorithm_list", "kind": "function", "doc": "<p>pytest function for utils.config.load_algorithm_list()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.config.tests.test_load_config_settings", "modulename": "clev2er.utils.config.tests.test_load_config_settings", "kind": "module", "doc": "<p>pytest of utils.config.load_config_files()</p>\n"}, {"fullname": "clev2er.utils.config.tests.test_load_config_settings.test_load_config_files", "modulename": "clev2er.utils.config.tests.test_load_config_settings", "qualname": "test_load_config_files", "kind": "function", "doc": "<p>pytest function for utils.config.load_config_files()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2", "modulename": "clev2er.utils.cs2", "kind": "module", "doc": "<p><strong>CS2 specific modules</strong></p>\n"}, {"fullname": "clev2er.utils.cs2.backscatter", "modulename": "clev2er.utils.cs2.backscatter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.cs2.backscatter.backscatter", "modulename": "clev2er.utils.cs2.backscatter.backscatter", "kind": "module", "doc": "<p>Functions to compute backscatter.</p>\n\n<h2 id=\"functions\">Functions:</h2>\n\n<p>def cs_counts_to_watts( pwr_cnt, lin_fact, pow2_fact ):\n    Converts from counts to watts.</p>\n\n<p>def compute_backscatter( rx_pow_w, range_m, roll_deg, pitch_deg, tx_pow_w,\n                         ellipse_semi_major_m = 6378137.0, speed_of_light_ms = 2.99792458E+08,\n                         effective_pulse_len_s = 4.183e-9, ant_gain_linear = 18197.008586099826, \n                         wavelength_m = 2.2084e-2,\n                         bandwidth_hz = 320.0e6, beam_angle_az_deg = 1.06, \n                         beam_angle_el_deg = 1.1992,\n                         misp_roll_bias_deg = 0, misp_pitch_bias_deg = 0,\n                         sigma_bias = 0, sigma_loss_const_db = 0,\n                         misp_mode = 0, rough_mode = 0 ):\n    Converts watts to backscatter using range, transmitted power, and pointing information. </p>\n\n<h2 id=\"unit-tests\">Unit Tests:</h2>\n\n<p>The __main__ section includes the unit tests of the retracker.\nThese are run from the command line as follows:</p>\n\n<blockquote>\n  <p>python backscatter</p>\n</blockquote>\n"}, {"fullname": "clev2er.utils.cs2.backscatter.backscatter.cs_counts_to_watts", "modulename": "clev2er.utils.cs2.backscatter.backscatter", "qualname": "cs_counts_to_watts", "kind": "function", "doc": "<p>Convert CryoSat2 waveform counts to Watts.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>pwr_cnt : float\n    Power in waveform counts.\nlin_fact : float\n    Linear conversion factor from L1b data ('echo_scale_factor')\npow2_fact : float\n    Power of 2 conversion factor from L1b data ('echo_scale_pwr').</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    Power in Watts measured at the antenna.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pwr_cnt</span>, </span><span class=\"param\"><span class=\"n\">lin_fact</span>, </span><span class=\"param\"><span class=\"n\">pow2_fact</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.backscatter.backscatter.compute_backscatter", "modulename": "clev2er.utils.cs2.backscatter.backscatter", "qualname": "compute_backscatter", "kind": "function", "doc": "<p>Compute backscatter from measured power and range, with optional corrections\nfor mispointing and roughness.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>rx_pow_w : float\n    Measured received power in watts\nrange_m : float\n    Measured range to the surface in meters.\nroll_deg : float\n    Roll angle of the platform in degrees.\npitch_deg : float\n    Pitch angle of the platform in degrees.\ntx_pow_w : float\n    Transmitted power in watts.\nellipse_semi_major_m : float\n    Semi-major axis of the ellipsoid in meters. Defaults to WGS84.\nspeed_of_light_ms : float\n    Speed of light in meters. Defaults to standard value.\neffective_pulse_len_s : float\n    Effective pulse length of the transmitted pulse. Defaults to the CS2 value.\nant_gain_linear : float\n    Antenna gain expressed in linear units (not dB). Defaults to the CS2 value.\nwavelength_m : float\n    Wavelength of the altimeter in meters. Defaults to the CS2 value.\nbandwidth_hz : float\n    Bandwidth of the pulse in hertz. Defaults to the CS2 value.\nbeam_angle_az_deg : float\n    Azimuth beam angle of the elliptical antenna pattern. Defaults to the CS2 value.\nbeam_angle_el_deg : float\n    Elevation beam angle of the elliptical antenna pattern. Defaults to the CS2 value.\nmisp_roll_bias_deg : float\n    Optional bias to apply to measured roll. Defaults to zero.\nmisp_pitch_bias_deg : type\n    Optional bias to apply to measured pitch. Defaults to zero.\nsigma_bias : type\n    Optional bias to apply to returned backscatter. Defaults to zero.\nsigma_loss_const_db : type\n    Optional loss constant to apply to returned backscatter. Defaults to zero.\nmisp_mode : int\n    Method to use to compensate for the mispointing. Defaults to 0 (no compensation)\nrough_mode : int\n    Method to use to compensate for the surface roughness. Defaults to 0 (no compensation)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    Computed surface backscatter in dB.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>A simple usage example:</p>\n\n<p>watts = cs_counts_to_watts( counts, echo_scale_factor, echo_scale_pwr )\nsigma0 = compute_backscatter( watts, range_m, roll_deg, pitch_deg, tx_pow_w )</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rx_pow_w</span>,</span><span class=\"param\">\t<span class=\"n\">range_m</span>,</span><span class=\"param\">\t<span class=\"n\">roll_deg</span>,</span><span class=\"param\">\t<span class=\"n\">pitch_deg</span>,</span><span class=\"param\">\t<span class=\"n\">tx_pow_w</span>,</span><span class=\"param\">\t<span class=\"n\">ellipse_semi_major_m</span><span class=\"o\">=</span><span class=\"mf\">6378137.0</span>,</span><span class=\"param\">\t<span class=\"n\">speed_of_light_ms</span><span class=\"o\">=</span><span class=\"mf\">299792458.0</span>,</span><span class=\"param\">\t<span class=\"n\">effective_pulse_len_s</span><span class=\"o\">=</span><span class=\"mf\">4.183e-09</span>,</span><span class=\"param\">\t<span class=\"n\">ant_gain_linear</span><span class=\"o\">=</span><span class=\"mf\">18197.008586099826</span>,</span><span class=\"param\">\t<span class=\"n\">wavelength_m</span><span class=\"o\">=</span><span class=\"mf\">0.022084</span>,</span><span class=\"param\">\t<span class=\"n\">bandwidth_hz</span><span class=\"o\">=</span><span class=\"mf\">320000000.0</span>,</span><span class=\"param\">\t<span class=\"n\">beam_angle_az_deg</span><span class=\"o\">=</span><span class=\"mf\">1.06</span>,</span><span class=\"param\">\t<span class=\"n\">beam_angle_el_deg</span><span class=\"o\">=</span><span class=\"mf\">1.1992</span>,</span><span class=\"param\">\t<span class=\"n\">misp_roll_bias_deg</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">misp_pitch_bias_deg</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">sigma_bias</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">sigma_loss_const_db</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">misp_mode</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">rough_mode</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate", "modulename": "clev2er.utils.cs2.geolocate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_lepta", "modulename": "clev2er.utils.cs2.geolocate.geolocate_lepta", "kind": "module", "doc": "<p>Slope correction/geolocation function using an adapted LEPTA method from Li et al (2022)</p>\n"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_lepta.calculate_distances", "modulename": "clev2er.utils.cs2.geolocate.geolocate_lepta", "qualname": "calculate_distances", "kind": "function", "doc": "<p>calculates the distances between a  refernce cartesian point (x1,y1,z1) in 3d space\nand a list of other points : x2[],y2[],z2[]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x1_coord (float):</strong>  x coordinate of ref point</li>\n<li><strong>y1_coord (float):</strong>  y coordinate of ref point</li>\n<li><strong>z1_coord (float):</strong>  z coordinate of ref point</li>\n<li><strong>x2_array (np.ndarray):</strong>  list of x coordinates</li>\n<li><strong>y2_array (np.ndarray):</strong>  list of y coordinates</li>\n<li><strong>z2_array (np.ndarray):</strong>  list of z coordinates</li>\n<li><strong>squared_only (bool) :</strong>  if True, only calculate the squares of diffs and not sqrt\nthis will be faster, but doesn't give actual distances</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: list of distances between points x1,y1,z1 and x2[],y2[],z2[]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">z1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">y2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">z2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">squared_only</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_lepta.datetime2year", "modulename": "clev2er.utils.cs2.geolocate.geolocate_lepta", "qualname": "datetime2year", "kind": "function", "doc": "<p>calculate decimal year from datetime</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_dt (datetime):</strong>  datetime obj to process</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: decimal year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date_dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_lepta.median_dem_height_around_a_point", "modulename": "clev2er.utils.cs2.geolocate.geolocate_lepta", "qualname": "median_dem_height_around_a_point", "kind": "function", "doc": "<p>Find the median DEM height in a rectangle of width\npulse_limited_footprint_size around a x,y point</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>thisdem (Dem):</strong>  Dem object used for Roemer/LEPTA correction</li>\n<li><strong>xpos (float):</strong> x location of point in m</li>\n<li><strong>ypos (float):</strong> y location of point in m</li>\n<li><strong>pulse_limited_footprint_size (int):</strong>  pulse limited footprint size in m</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float|None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">thisdem</span><span class=\"p\">:</span> <span class=\"n\">clev2er</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">Dem</span>,</span><span class=\"param\">\t<span class=\"n\">xpos</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">ypos</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">pulse_limited_footprint_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_lepta.geolocate_lepta", "modulename": "clev2er.utils.cs2.geolocate.geolocate_lepta", "qualname": "geolocate_lepta", "kind": "function", "doc": "<p>Geolocate CS2 LRM measurements using an adapted LEPTA (Li et al, 2022) method</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  NetCDF Dataset of L1b file</li>\n<li><strong>thisdem (Dem):</strong>  Dem object used for Roemer/LEPTA correction</li>\n<li><strong>config (dict):</strong>  config dictionary containing [\"lrm_lepta_geolocation\"][params]</li>\n<li><strong>surface_type_20_ku (np.ndarray):</strong>  surface type for track, where 1 == grounded_ice</li>\n<li><strong>geo_corrected_tracker_range (np.ndarray) :</strong>  geo-corrected tracker range (NOT retracked)</li>\n<li><strong>retracker_correction (np.ndarray) :</strong>  retracker correction to range (m)</li>\n<li><strong>leading_edge_start (np.ndarray) :</strong>  position of start of waveform leading edge (decimal bins)</li>\n<li><strong>leading_edge_stop (np.ndarray) :</strong>  position of end of waveform leading edge (decimal bins)</li>\n<li><strong>waveforms_to_include (np.ndarray) :</strong>  boolean array of waveforms to include (False == reject)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray, np.ndarray, np.ndarray, np.ndarray):\n  (height_20_ku, lat_poca_20_ku, lon_poca_20_ku, slope_ok)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">thisdem</span><span class=\"p\">:</span> <span class=\"n\">clev2er</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">Dem</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">thisdhdt</span><span class=\"p\">:</span> <span class=\"n\">clev2er</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dhdt_data</span><span class=\"o\">.</span><span class=\"n\">dhdt</span><span class=\"o\">.</span><span class=\"n\">Dhdt</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">surface_type_20_ku</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">geo_corrected_tracker_range</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">retracker_correction</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">leading_edge_start</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">leading_edge_stop</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">waveforms_to_include</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_lrm", "modulename": "clev2er.utils.cs2.geolocate.geolocate_lrm", "kind": "module", "doc": "<p>LRM geolocation functions</p>\n"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_lrm.geolocate_lrm", "modulename": "clev2er.utils.cs2.geolocate.geolocate_lrm", "qualname": "geolocate_lrm", "kind": "function", "doc": "<p>Perform slope correction index to get alt/azimuth</p>\n\n<p>Use alt/azimuth/range to get lat/lon/height. Return lat/lon/heights</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (np.ndarray):</strong>  CS2 L1b dataset</li>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n<li><strong>slope_model_dir (str):</strong>  path of slope model files</li>\n<li><strong>surface_type_20_ku (np.ndarray):</strong>  surface type</li>\n<li><strong>range_cor_20_ku (np.ndarray):</strong>  corrected range</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">surface_type_20_ku</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">range_cor_20_ku</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_roemer", "modulename": "clev2er.utils.cs2.geolocate.geolocate_roemer", "kind": "module", "doc": "<p>Slope correction/geolocation function using an adapted Roemer method\nfrom :\nRoemer, S., Legr\u00e9sy, B., Horwath, M., and Dietrich, R.: Refined\nanalysis of radar altimetry data applied to the region of the\nsubglacial Lake Vostok/Antarctica, Remote Sens. Environ., 106,\n269\u2013284, <a href=\"https://doi.org/10.1016/j.rse.2006.02.026\">https://doi.org/10.1016/j.rse.2006.02.026</a>, 2007.</p>\n"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_roemer.calculate_distances3d", "modulename": "clev2er.utils.cs2.geolocate.geolocate_roemer", "qualname": "calculate_distances3d", "kind": "function", "doc": "<p>calculates the distances between a  refernce cartesian point (x1,y1,z1) in 3d space\nand a list of other points : x2[],y2[],z2[]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x1_coord (float):</strong>  x coordinate of ref point</li>\n<li><strong>y1_coord (float):</strong>  y coordinate of ref point</li>\n<li><strong>z1_coord (float):</strong>  z coordinate of ref point</li>\n<li><strong>x2_array (np.ndarray):</strong>  list of x coordinates</li>\n<li><strong>y2_array (np.ndarray):</strong>  list of y coordinates</li>\n<li><strong>z2_array (np.ndarray):</strong>  list of z coordinates</li>\n<li><strong>squared_only (bool) :</strong>  if True, only calculate the squares of diffs and not sqrt\nthis will be faster, but doesn't give actual distances</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[float]: list of distances between points x1,y1,z1 and x2[],y2[],z2[]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">z1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">y2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">z2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">squared_only</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_roemer.calculate_distances2d", "modulename": "clev2er.utils.cs2.geolocate.geolocate_roemer", "qualname": "calculate_distances2d", "kind": "function", "doc": "<p>calculates the distances between a  refernce cartesian point (x1,y1) in 2d space\nand a list of other points : x2[],y2[]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x1_coord (float):</strong>  x coordinate of ref point</li>\n<li><strong>y1_coord (float):</strong>  y coordinate of ref point</li>\n<li><strong>x2_array (np.ndarray):</strong>  list of x coordinates</li>\n<li><strong>y2_array (np.ndarray):</strong>  list of y coordinates</li>\n<li><strong>squared_only (bool) :</strong>  if True, only calculate the squares of diffs and not sqrt\nthis will be faster, but doesn't give actual distances</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: list of distances between points x1,y1,z1 and x2[],y2[]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">squared_only</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_roemer.replace_nan_with_median", "modulename": "clev2er.utils.cs2.geolocate.geolocate_roemer", "qualname": "replace_nan_with_median", "kind": "function", "doc": "<p>Replaces nan values in an array with the median of their non-nan neighbors.</p>\n\n<p>Parameters:\narr (np.ndarray): The input 2D array with potential nan values.</p>\n\n<p>Returns:\nnp.ndarray: Array with nan values replaced by the median of their neighbors.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_roemer.find_poca", "modulename": "clev2er.utils.cs2.geolocate.geolocate_roemer", "qualname": "find_poca", "kind": "function", "doc": "<p>Function that finds the POCA using method similar to Roemer et al. (2007)\n   Finds the point with the shortest range to the satellite in the DEM segment and\n   computes the slope correction to height\n   Adapted from original : CLS (python) of McMillan (Matlab) code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>zdem (np.ndarray):</strong>  DEM height values</li>\n<li><strong>xdem (np.ndarray):</strong>  x locations of DEM in polar stereo coordinates (m)</li>\n<li><strong>ydem (np.ndarray):</strong>  y locations of DEM in polar stereo coordinates (m)</li>\n<li><strong>nadir_x (float):</strong>  x location of nadir in polar stereo coordinates (m)</li>\n<li><strong>nadir_y (float):</strong>  y location of nadir in polar stereo coordinates (m)</li>\n<li><strong>alt_pt (float):</strong>  altitude at nadir (m)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(float,float,float,float,float,bool): poca_x, poca_y, poca_z, slope_correction_to_height,\n  range_to_satellite_of_poca,\n  flg_success</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">zdem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xdem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">ydem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">nadir_x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">nadir_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">alt_pt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_roemer.datetime2year", "modulename": "clev2er.utils.cs2.geolocate.geolocate_roemer", "qualname": "datetime2year", "kind": "function", "doc": "<p>calculate decimal year from datetime</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_dt (datetime):</strong>  datetime obj to process</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: decimal year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date_dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_roemer.geolocate_roemer", "modulename": "clev2er.utils.cs2.geolocate.geolocate_roemer", "qualname": "geolocate_roemer", "kind": "function", "doc": "<p>Geolocate CS2 LRM measurements using an adapted Roemer (Roemer et al, 2007) method</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  NetCDF Dataset of L1b file</li>\n<li><strong>thisdem (Dem):</strong>  Dem object used for Roemer correction</li>\n<li><strong>thisdem_fine (Dem):</strong>  Dem object used for fine Roemer correction (maybe same obj as thisdem)</li>\n<li><strong>config (dict):</strong>  config dictionary containing [\"lrm_roemer_geolocation\"][params]</li>\n<li><strong>surface_type_20_ku (np.ndarray):</strong>  surface type for track, where 1 == grounded_ice</li>\n<li><strong>geo_corrected_tracker_range (np.ndarray) :</strong>  geo-corrected tracker range (NOT retracked)</li>\n<li><strong>retracker_correction (np.ndarray) :</strong>  retracker correction to range (m)</li>\n<li><strong>waveforms_to_include (np.ndarray) :</strong>  boolean array of waveforms to include (False == reject)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray):\n  (height_20_ku, lat_poca_20_ku, lon_poca_20_ku, slope_ok, relocation_distance)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">thisdem</span><span class=\"p\">:</span> <span class=\"n\">clev2er</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">Dem</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">thisdem_fine</span><span class=\"p\">:</span> <span class=\"n\">clev2er</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">Dem</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">thisdhdt</span><span class=\"p\">:</span> <span class=\"n\">clev2er</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dhdt_data</span><span class=\"o\">.</span><span class=\"n\">dhdt</span><span class=\"o\">.</span><span class=\"n\">Dhdt</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">surface_type_20_ku</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">geo_corrected_tracker_range</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">retracker_correction</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">waveforms_to_include</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_sin", "modulename": "clev2er.utils.cs2.geolocate.geolocate_sin", "kind": "module", "doc": "<p>geolocate_sin.py</p>\n"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_sin.solve_eqn", "modulename": "clev2er.utils.cs2.geolocate.geolocate_sin", "qualname": "solve_eqn", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>aaa (_type_):</strong>  _description_</li>\n<li><strong>bbb (_type_):</strong>  _description_</li>\n<li><strong>base_vec (_type_):</strong>  _description_</li>\n<li><strong>crf_centre (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">aaa</span>, </span><span class=\"param\"><span class=\"n\">bbb</span>, </span><span class=\"param\"><span class=\"n\">base_vec</span>, </span><span class=\"param\"><span class=\"n\">crf_centre</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_sin.get_crf_in_efc", "modulename": "clev2er.utils.cs2.geolocate.geolocate_sin", "qualname": "get_crf_in_efc", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lon (_type_):</strong>  _description_</li>\n<li><strong>lat (_type_):</strong>  _description_</li>\n<li><strong>alt (_type_):</strong>  _description_</li>\n<li><strong>vel_vec (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">alt</span>, </span><span class=\"param\"><span class=\"n\">vel_vec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_sin.rotation_matrix", "modulename": "clev2er.utils.cs2.geolocate.geolocate_sin", "qualname": "rotation_matrix", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>crf_axis (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">crf_axis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_sin.angle_to_poca", "modulename": "clev2er.utils.cs2.geolocate.geolocate_sin", "qualname": "angle_to_poca", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>angle (_type_):</strong>  _description_</li>\n<li><strong>lat (_type_):</strong>  _description_</li>\n<li><strong>lon (_type_):</strong>  _description_</li>\n<li><strong>alt (_type_):</strong>  _description_</li>\n<li><strong>cor_range (_type_):</strong>  _description_</li>\n<li><strong>vel_vec (_type_):</strong>  _description_</li>\n<li><strong>base_vec (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle</span>, </span><span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">alt</span>, </span><span class=\"param\"><span class=\"n\">cor_range</span>, </span><span class=\"param\"><span class=\"n\">vel_vec</span>, </span><span class=\"param\"><span class=\"n\">base_vec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_sin.phase_to_angle", "modulename": "clev2er.utils.cs2.geolocate.geolocate_sin", "qualname": "phase_to_angle", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>phase (_type_):</strong>  _description_</li>\n<li><strong>wavelength (float, optional):</strong>  _description_. Defaults to 0.022084.</li>\n<li><strong>baseline (float, optional):</strong>  _description_. Defaults to 1.1676.</li>\n<li><strong>inferred_angle_cal_mult (float, optional):</strong>  _description_. Defaults to 1.02775.</li>\n<li><strong>inferred_angle_cal_add (float, optional):</strong>  _description_. Defaults to 0.0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">phase</span>,</span><span class=\"param\">\t<span class=\"n\">wavelength</span><span class=\"o\">=</span><span class=\"mf\">0.022084</span>,</span><span class=\"param\">\t<span class=\"n\">baseline</span><span class=\"o\">=</span><span class=\"mf\">1.1676</span>,</span><span class=\"param\">\t<span class=\"n\">inferred_angle_cal_mult</span><span class=\"o\">=</span><span class=\"mf\">1.02775</span>,</span><span class=\"param\">\t<span class=\"n\">inferred_angle_cal_add</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.geolocate_sin.geolocate_sin", "modulename": "clev2er.utils.cs2.geolocate.geolocate_sin", "qualname": "geolocate_sin", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (_type_):</strong>  _description_</li>\n<li><strong>config (_type_):</strong>  _description_</li>\n<li><strong>dem_ant (Dem):</strong>  Antarctic DEM</li>\n<li><strong>dem_grn (Dem):</strong>  Greenland DEM</li>\n<li><strong>range_cor_20_ku (_type_):</strong>  _description_</li>\n<li><strong>ind_wfm_retrack_20_ku (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>sarin_phase.SINLocateError:</strong>  _description_</li>\n<li><strong>sarin_phase.SINLocateError:</strong>  _description_</li>\n<li><strong>sarin_phase.SINLocateError:</strong>  _description_</li>\n<li><strong>e:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b</span>,</span><span class=\"param\">\t<span class=\"n\">config</span>,</span><span class=\"param\">\t<span class=\"n\">dem_ant</span>,</span><span class=\"param\">\t<span class=\"n\">dem_grn</span>,</span><span class=\"param\">\t<span class=\"n\">range_cor_20_ku</span>,</span><span class=\"param\">\t<span class=\"n\">ind_wfm_retrack_20_ku</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "kind": "module", "doc": "<p>lrm_slope.py</p>\n"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.llh_to_ecef_pyproj", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "llh_to_ecef_pyproj", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lat (_type_):</strong>  _description_</li>\n<li><strong>lon (_type_):</strong>  _description_</li>\n<li><strong>alt (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">alt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.ecef_to_llh_pyproj", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "ecef_to_llh_pyproj", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (_type_):</strong>  _description_</li>\n<li><strong>y (_type_):</strong>  _description_</li>\n<li><strong>z (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.trans_coord", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "trans_coord", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lat (_type_):</strong>  _description_</li>\n<li><strong>lon (_type_):</strong>  _description_</li>\n<li><strong>eccentricity (_type_):</strong>  _description_</li>\n<li><strong>semimajor (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">eccentricity</span>, </span><span class=\"param\"><span class=\"n\">semimajor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.setup_slopes", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "setup_slopes", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (_type_):</strong>  _description_</li>\n<li><strong>y (_type_):</strong>  _description_</li>\n<li><strong>lat (_type_):</strong>  _description_</li>\n<li><strong>slope (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">slope</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.interp_slope", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "interp_slope", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (_type_):</strong>  _description_</li>\n<li><strong>n (_type_):</strong>  _description_</li>\n<li><strong>m (_type_):</strong>  _description_</li>\n<li><strong>p (_type_):</strong>  _description_</li>\n<li><strong>q (_type_):</strong>  _description_</li>\n<li><strong>slope_filename (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">p</span>, </span><span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">slope_filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.comp_part_devs", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "comp_part_devs", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lat (_type_):</strong>  _description_</li>\n<li><strong>lon (_type_):</strong>  _description_</li>\n<li><strong>meridional (_type_):</strong>  _description_</li>\n<li><strong>eccentricity (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">meridional</span>, </span><span class=\"param\"><span class=\"n\">eccentricity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.calc_echo_dir", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "calc_echo_dir", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>deriv00 (_type_):</strong>  _description_</li>\n<li><strong>deriv01 (_type_):</strong>  _description_</li>\n<li><strong>deriv10 (_type_):</strong>  _description_</li>\n<li><strong>deriv11 (_type_):</strong>  _description_</li>\n<li><strong>xs (_type_):</strong>  _description_</li>\n<li><strong>ys (_type_):</strong>  _description_</li>\n<li><strong>meridional (_type_):</strong>  _description_</li>\n<li><strong>zonal (_type_):</strong>  _description_</li>\n<li><strong>alt (_type_):</strong>  _description_</li>\n<li><strong>lat (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">deriv00</span>,</span><span class=\"param\">\t<span class=\"n\">deriv01</span>,</span><span class=\"param\">\t<span class=\"n\">deriv10</span>,</span><span class=\"param\">\t<span class=\"n\">deriv11</span>,</span><span class=\"param\">\t<span class=\"n\">xs</span>,</span><span class=\"param\">\t<span class=\"n\">ys</span>,</span><span class=\"param\">\t<span class=\"n\">meridional</span>,</span><span class=\"param\">\t<span class=\"n\">zonal</span>,</span><span class=\"param\">\t<span class=\"n\">alt</span>,</span><span class=\"param\">\t<span class=\"n\">lat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.prepare_slope", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "prepare_slope", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slope_filename (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.do_slope", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "do_slope", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lat (_type_):</strong>  _description_</li>\n<li><strong>lon (_type_):</strong>  _description_</li>\n<li><strong>alt (_type_):</strong>  _description_</li>\n<li><strong>slope (_type_):</strong>  _description_</li>\n<li><strong>slope_filename (_type_):</strong>  _description_</li>\n<li><strong>eccentricity (_type_):</strong>  _description_</li>\n<li><strong>semimajor (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">alt</span>, </span><span class=\"param\"><span class=\"n\">slope</span>, </span><span class=\"param\"><span class=\"n\">slope_filename</span>, </span><span class=\"param\"><span class=\"n\">eccentricity</span>, </span><span class=\"param\"><span class=\"n\">semimajor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.proc_elev", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "proc_elev", "kind": "function", "doc": "<p>djb to document</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lat (_type_):</strong>  _description_</li>\n<li><strong>lon (_type_):</strong>  _description_</li>\n<li><strong>alt (_type_):</strong>  _description_</li>\n<li><strong>range_1 (_type_):</strong>  _description_</li>\n<li><strong>att (_type_):</strong>  _description_</li>\n<li><strong>azimuth (_type_):</strong>  _description_</li>\n<li><strong>meridional (_type_):</strong>  _description_</li>\n<li><strong>zonal (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">alt</span>, </span><span class=\"param\"><span class=\"n\">range_1</span>, </span><span class=\"param\"><span class=\"n\">att</span>, </span><span class=\"param\"><span class=\"n\">azimuth</span>, </span><span class=\"param\"><span class=\"n\">meridional</span>, </span><span class=\"param\"><span class=\"n\">zonal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.lrm_slope.slope_doppler", "modulename": "clev2er.utils.cs2.geolocate.lrm_slope", "qualname": "slope_doppler", "kind": "function", "doc": "<p>slope_doppler</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sat_x</span>,</span><span class=\"param\">\t<span class=\"n\">sat_y</span>,</span><span class=\"param\">\t<span class=\"n\">sat_z</span>,</span><span class=\"param\">\t<span class=\"n\">echo_x</span>,</span><span class=\"param\">\t<span class=\"n\">echo_y</span>,</span><span class=\"param\">\t<span class=\"n\">echo_z</span>,</span><span class=\"param\">\t<span class=\"n\">vel</span>,</span><span class=\"param\">\t<span class=\"n\">chirp_slope</span>,</span><span class=\"param\">\t<span class=\"n\">wavelength</span>,</span><span class=\"param\">\t<span class=\"n\">speed_light</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "kind": "module", "doc": "<p>SARIN Phase funcs</p>\n"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.SINLocateError", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "SINLocateError", "kind": "class", "doc": "<p>to be documented by djb</p>\n", "bases": "builtins.Exception"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.phase_func_least_squares", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "phase_func_least_squares", "kind": "function", "doc": "<p>to be documented by djb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ttt (_type_):</strong>  _description_</li>\n<li><strong>params (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ttt</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.resid_least_squares", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "resid_least_squares", "kind": "function", "doc": "<p>to be documented by djb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vals (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vals</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.jac_least_squares", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "jac_least_squares", "kind": "function", "doc": "<p>to be documented by djb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vals (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vals</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.jac_curve_fit", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "jac_curve_fit", "kind": "function", "doc": "<p>to be documented by djb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vals (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vals</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.phase_func_curve_fit", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "phase_func_curve_fit", "kind": "function", "doc": "<p>to be documented by djb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ttt (_type_):</strong>  _description_</li>\n<li><strong>slope (_type_):</strong>  _description_</li>\n<li><strong>constant (_type_):</strong>  _description_</li>\n<li><strong>tt0 (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ttt</span>, </span><span class=\"param\"><span class=\"n\">slope</span>, </span><span class=\"param\"><span class=\"n\">constant</span>, </span><span class=\"param\"><span class=\"n\">tt0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.extract_phase_window", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "extract_phase_window", "kind": "function", "doc": "<p>to be documented by djb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>phase_in (_type_):</strong>  _description_</li>\n<li><strong>phase_window_start (_type_):</strong>  _description_</li>\n<li><strong>phase_window_width (_type_):</strong>  _description_</li>\n<li><strong>unwrap (bool, optional):</strong>  _description_. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phase_in</span>, </span><span class=\"param\"><span class=\"n\">phase_window_start</span>, </span><span class=\"param\"><span class=\"n\">phase_window_width</span>, </span><span class=\"param\"><span class=\"n\">unwrap</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.phase_fit_lsq", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "phase_fit_lsq", "kind": "function", "doc": "<p>to be documented by djb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>phase (_type_):</strong>  _description_</li>\n<li><strong>coherence (_type_):</strong>  _description_</li>\n<li><strong>position (_type_):</strong>  _description_</li>\n<li><strong>bad_1 (_type_):</strong>  _description_</li>\n<li><strong>bad_2 (_type_):</strong>  _description_</li>\n<li><strong>bad_3 (_type_):</strong>  _description_</li>\n<li><strong>config (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phase</span>, </span><span class=\"param\"><span class=\"n\">coherence</span>, </span><span class=\"param\"><span class=\"n\">position</span>, </span><span class=\"param\"><span class=\"n\">bad_1</span>, </span><span class=\"param\"><span class=\"n\">bad_2</span>, </span><span class=\"param\"><span class=\"n\">bad_3</span>, </span><span class=\"param\"><span class=\"n\">config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.phase_fit_cuf", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "phase_fit_cuf", "kind": "function", "doc": "<p>to be documented by djb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>phase (_type_):</strong>  _description_</li>\n<li><strong>coherence (_type_):</strong>  _description_</li>\n<li><strong>position (_type_):</strong>  _description_</li>\n<li><strong>bad_1 (_type_):</strong>  _description_</li>\n<li><strong>bad_2 (_type_):</strong>  _description_</li>\n<li><strong>bad_3 (_type_):</strong>  _description_</li>\n<li><strong>config (_type_):</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phase</span>, </span><span class=\"param\"><span class=\"n\">coherence</span>, </span><span class=\"param\"><span class=\"n\">position</span>, </span><span class=\"param\"><span class=\"n\">bad_1</span>, </span><span class=\"param\"><span class=\"n\">bad_2</span>, </span><span class=\"param\"><span class=\"n\">bad_3</span>, </span><span class=\"param\"><span class=\"n\">config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.geolocate.sarin_phase.phase_fit_sample", "modulename": "clev2er.utils.cs2.geolocate.sarin_phase", "qualname": "phase_fit_sample", "kind": "function", "doc": "<p>Requires documenting by djb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>phase (_type_):</strong>  _description_</li>\n<li><strong>coherence (_type_):</strong>  _description_</li>\n<li><strong>position (_type_):</strong>  _description_</li>\n<li><strong>bad_1 (_type_):</strong>  _description_</li>\n<li><strong>bad_2 (_type_):</strong>  _description_</li>\n<li><strong>bad_3 (_type_):</strong>  _description_</li>\n<li><strong>config (_type_, optional):</strong>  _description_. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SINLocateError:</strong>  _description_</li>\n<li><strong>Exception:</strong>  _description_</li>\n<li><strong>SINLocateError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phase</span>, </span><span class=\"param\"><span class=\"n\">coherence</span>, </span><span class=\"param\"><span class=\"n\">position</span>, </span><span class=\"param\"><span class=\"n\">bad_1</span>, </span><span class=\"param\"><span class=\"n\">bad_2</span>, </span><span class=\"param\"><span class=\"n\">bad_3</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers", "modulename": "clev2er.utils.cs2.retrackers", "kind": "module", "doc": "<p><strong>CS2 Retrackers</strong></p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker", "modulename": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker", "kind": "module", "doc": "<p>CS2 Maximum Coherence Retracker for SARin waveforms only\nAdapted by A.Muir (CPOM) from M.McMillan (CPOM) Leading Edge Detection and\nJ.Aublanc (CLS) LMC Retracker from Aublanc et al, 2021 (Ice Sheet Topography from a\nNew CryoSat-2 SARIn Processing Chain, and Assessment by Comparison to ICESat-2 over\nAntarctica)</p>\n\n<h2 id=\"functions\">Functions:</h2>\n\n<p>def retrack_cs2_sin_max_coherence(l1b_file=None,waveforms=None,coherence=None,\nretrack_smooth_wf=False, plot_flag=False,\nmeasurement_index=None, include_measurements_array=None)</p>\n\n<h6 id=\"used-as\">Used as:</h6>\n\n<blockquote>\n  <p>dr_bin_mc,dr_meters_mc,leading_edge_start,leading_edge_stop, pwr_at_rtrk_point_mc,\n  n_retrack_mc_failed=    retrack_cs2_sin_max_coherence(l1b_file=\n  '/path/to/CS_OFFL_SIR_LRM_1B_20190504T122726_20190504T123244_D001.nc')</p>\n  \n  <p>or by passing in waveforms directly:</p>\n  \n  <p>nc = Dataset('/path/to/CS_OFFL_SIR_LRM_1B_20190504T122726_20190504T123244_D001.nc')\n  wfs = nc.variables['pwr_waveform_20_ku'][:].data\n  coh = nc.variables['coherence_waveform_20_ku'][:].data</p>\n  \n  <p>dr_bin_tfmra,dr_meters_tfmra,dr_bin_mc,dr_meters_mc,leading_edge_start,\n  leading_edge_stop, n_retrack_tfmra_failed, n_retrack_mc_failed=        retrack_tfmra_tcog_waveforms_cs2(waveforms=wfs,coherence=coh)</p>\n</blockquote>\n\n<h2 id=\"unit-tests\">Unit Tests:</h2>\n\n<p>The __main__ section includes the unit tests of the retracker. These are run from the\ncommand line as follows:</p>\n\n<p>% cs2_tfmra_tcof_retracker.py -h     :  for all command line options of the unit tests\nExamples:\n% cs2_tfmra_tcof_retracker.py --lrmtest  : run unit test on a sample L1b LRM file.\nResults are compared to Matlab outputs from original code.\n% cs2_tfmra_tcof_retracker.py --sintest  : run unit test on a sample L1b SIN file.\nResults are compared to Matlab outputs from original code.\n% cs2_tfmra_tcof_retracker.py --lrmtest --debug : enable debug mode, which prints\nresults from intermediate retracker steps\n% cs2_tfmra_tcof_retracker.py --lrmtest --plot  : enable plot mode, which plots input\n% waveforms, leading edge, maximum peak, and retracker points\n% cs2_tfmra_tcof_retracker.py --lrmtest --plot  --index 312  --debug : just\nretrack measurement number 312 (index count from 0)\n% cs2_tfmra_tcof_retracker.py --infile /path/to/l1bfile --plot : test with another\n Baseline-D L1b file\n% cs2_tfmra_tcof_retracker.py --infile /path/to/l1bfile --outfile\n/path/to/output_results.txt : write retracker output results to text file.\n        Results are formatted as 1 waveform retracking result per line: tfmra epoch\n        (bins) tfmra epoch (m) tcog epoch (bins) tcog epoch (m)</p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker.InvalidArraySizeError", "modulename": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker", "qualname": "InvalidArraySizeError", "kind": "class", "doc": "<p>Exception for invalid array sizes</p>\n", "bases": "builtins.Exception"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker.retrack_cs2_sin_max_coherence", "modulename": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker", "qualname": "retrack_cs2_sin_max_coherence", "kind": "function", "doc": "<p>% SUMMARY\n%   Retracking of CS2 SIN waveforms using Max Coherence Retracker\n%   Reference: CryoSat-2 Product Handbook Baseline D1.1, C2-LI-ACS-ESL-5319.\n%   This is an adapted python port of Matlab original by M.McMillan for Leading Edge\n%   Detection, and\n%   the LMC retracker in Aublanc et al, 2021 (Ice Sheet Topography from a\n%   New CryoSat-2 SARIn Processing Chain, and Assessment by Comparison to ICESat-2\n%   over Antarctica)\n% ------------------------------------------------------------------------</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b_file (str) :</strong>  file name of L1b file</li>\n<li><strong>waveforms (np.ndarray):</strong>  instead of reading from L1b file, you can pass in a\nnumpy.ndarray of shape (num_measurements, waveform_numbins).\nwaveform_numbins is 128 (LRM) or 1024 (SIN)</li>\n<li><strong>coherence (np.ndarray):</strong>  SIN only coherence waveform for use in maximum coherence\nretracking</li>\n<li><strong>retrack_smooth_wf (bool, def=False):</strong>  specify whether to retrack raw (False) or\nsmoothed waveform (True)</li>\n<li><strong>plot_flag (bool, def=False):</strong>  set to True to plot waveforms and retracking points\nfor testing/debugging purposes\n(Note, blocks until each plot closed)</li>\n<li><strong>measurement_index (int, def=None):</strong>  if not None, only retrack this measurement index\n(from 0). Used for debugging</li>\n<li><strong>include_measurements_array (List[bool]):</strong>  None or [array of boolean values of size equal to\nnumber of waveforms]. if not None, only retrack waveforms\ncorresponding to True values in this array</li>\n<li><strong>ref_bin_ind_sin (int, def=512) :</strong>  reference bin index, from CS2 Baseline-D User\nManual, p36;</li>\n<li><strong>wf_oversampling_factor (int) :</strong>  waveform oversampling factor (default=100)</li>\n<li><strong>noise_sample_limit (int, def=6) :</strong>  maximum bin used to compute noise statistics</li>\n<li><strong>noise_threshold (float,def=0.3) :</strong>  if mean amplitude in noise bins exceeds threshold then\nreject waveform</li>\n<li><strong>savitsky_golay_width (int, def=9):</strong>  Savitsky Golay smoothing width</li>\n<li><strong>savitsky_golay_poly_order (int, def=3):</strong>  Savitsky Golay polynomial order</li>\n<li><strong>le_id_threshold (float, def=0.05) :</strong>  power must exceed thermal noise by this amount to be\nidentified as a leading edge</li>\n<li><strong>le_dp_threshold (float, def=0.2):</strong>  define threshold on normalised amplitude change which is\nrequired to be accepted as lead edge</li>\n<li><strong>coherence_smoothing_width (int, def-9):</strong>  coherence boxcar average smoothing width</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple: (dr_bin_mc, dr_meters_mc, leading_edge_start, leading_edge_stop,pwr_at_rtrk_point_mc,\n          n_retrack_mc_failed, retrack_flag)\n          dr_bin_mc (List[float]) : max coherence epoch relative to nominal tracking point\n                                    in bins\n          dr_meters_mc (List[float]) : max coherence epoch relative to nominal tracking point\n                                    in meters\n          leading_edge_start (List[List[float]]): leading edge start coordinates\n                                              column 1 = bin  |  column 2 = normalised power\n          leading_edge_stop (List[List[float]]): leading edge stop coordinates\n                                              column 1 = bin  |  column 2 = normalised power\n          pwr_at_rtrk_point_mc (List[float]): power in counts at retracking point\n          n_retrack_mc_failed (int): number of waveforms were retracking failed\n          retrack_flag (List[List[int]]): returned retracker flags for each waveform indicate\n                      how retracking failed | 6 x t |\n                          column 1 (index 0): 0 or 1 max amplitude is 0 so skippings\n                                              or mean noise above a predefined threshold\n                          column 2 (index 1): 0 or 1 if no samples are sufficiently above the\n                              noise floor\n                          column 3 (index 2): 0 or 1 if no peak identified\n                          column 4 (index 3): 0 or 1 if no leading edge found by end of\n                          waveform\n                          column 5 (index 4): 0 (currently unused)\n                          column 6 (index 5): 0 or 1 if  No retracking point retrieved</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">waveforms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coherence</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">retrack_smooth_wf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">measurement_index</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_measurements_array</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ref_bin_ind_sin</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>,</span><span class=\"param\">\t<span class=\"n\">wf_oversampling_factor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">noise_sample_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.3</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_poly_order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">le_id_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">le_dp_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">coherence_smoothing_width</span><span class=\"o\">=</span><span class=\"mi\">9</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker", "modulename": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker", "kind": "module", "doc": "<p>TCOG retracker for CS2 waveforms from CS2 L1b (baseline-D/E only)\npython port of Matlab original by M.McMillan (CPOM, Lancaster)</p>\n\n<p>Added Savitsky-Golay waveform smoothing (Aublanc et al, 2021)</p>\n\n<h2 id=\"functions\">Functions:</h2>\n\n<p>def retrack_tcog_waveforms_cs2(l1b_file,retrack_threshold_lrm,retrack_threshold_sin,\nretrack_smooth_wf=False, plot_flag=0, measurement_index=None):</p>\n\n<h6 id=\"used-as\">Used as:</h6>\n\n<blockquote>\n  <p>dr_bin_tcog,dr_meters_tcog,leading_edge_start,leading_edge_stop, n_retracker_failures=        retrack_tcog_waveforms_cs2(l1b_file=\n      '/path/to/CS_OFFL_SIR_LRM_1B_20190504T122726_20190504T123244_D001.nc',\n                           retrack_threshold_lrm=0.2,\n                           retrack_threshold_sin=0.5,\n                           debug_flag=False,\n                           plot_flag=0,\n                           measurement_index=None)</p>\n  \n  <p>or by passing in waveforms directly:</p>\n  \n  <p>nc = Dataset('/path/to/CS_OFFL_SIR_LRM_1B_20190504T122726_20190504T123244_D001.nc')\n  wfs = nc.variables['pwr_waveform_20_ku'][:].data</p>\n  \n  <p>dr_bin_tcog,dr_meters_tcog,leading_edge_start,leading_edge_stop,  n_retracker_failures=        retrack_tcog_waveforms_cs2(waveforms=wfs,\n                           retrack_threshold_lrm=0.2,\n                           retrack_threshold_sin=0.5,\n                           debug_flag=False,\n                           plot_flag=0,\n                           measurement_index=None)</p>\n</blockquote>\n\n<h2 id=\"unit-tests\">Unit Tests:</h2>\n\n<p>The __main__ section includes the unit tests of the retracker. These are run\nfrom the command line as follows:</p>\n\n<p>% cs2_tcog_retracker.py -h     :  for all command line options of the unit tests\nExamples:\n% cs2_tcog_retracker.py --lrmtest  : run unit test on a sample L1b LRM file.\nResults are compared to Matlab outputs from original code.\n% cs2_tcog_retracker.py --sintest  : run unit test on a sample L1b SIN file\nResults are compared to Matlab outputs from original code.\n% cs2_tcog_retracker.py --lrmtest --debug : enable debug mode, which prints results\nfrom intermediate retracker steps\n% cs2_tcog_retracker.py --lrmtest --plot  : enable plot mode, which plots input waveforms\nleading edge, maximum peak, and retracker points\n% cs2_tcog_retracker.py --lrmtest --plot  --index 312  --debug : just retrack measurement\nnumber 312 (index count from 0)\n% cs2_tcog_retracker.py --infile /path/to/l1bfile --plot : test with another\nBaseline-D L1b file\n% cs2_tcog_retracker.py --infile /path/to/l1bfile --outfile /path/to/output_results.txt\n: write retracker output results to text file.\n        Results are formatted as 1 waveform retracking result per line: tfmra epoch\n        (bins) tfmra epoch (m) tcog epoch (bins) tcog epoch (m)</p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker.InvalidArraySizeError", "modulename": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker", "qualname": "InvalidArraySizeError", "kind": "class", "doc": "<p>Exception for invalid array sizes</p>\n", "bases": "builtins.Exception"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker.retrack_tcog_waveforms_cs2", "modulename": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker", "qualname": "retrack_tcog_waveforms_cs2", "kind": "function", "doc": "<h6 id=\"purpose\">Purpose:</h6>\n\n<blockquote>\n  <p>Retracking of CS2 LRM and SIN waveforms TCOG\n  Reference: CryoSat-2 Product Handbook Baseline D1.1, C2-LI-ACS-ESL-5319.\n  This is an adapted python port of Matlab original by M.McMillan</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b_file(str,def=None):</strong>  l1b .nc file (must be Baseline-D, NetCDF format)\nLRM or SIN, file names must contain SIR_SIN_1B, or SIR_LRM_1B</li>\n<li><strong>waveforms(np.ndarray,def=None):</strong>  instead of reading from L1b file, you can pass in a\nnumpy.ndarray of shape (num_measurements, waveform_numbins).\nwaveform_numbins is 128 (LRM) or 1024 (SIN)\nThis is the array returned by\nnc.variables['pwr_waveform_20_ku'][:].data</li>\n<li><strong>retrack_threshold_lrm(float, def=0.2):</strong>  lrm retracker threshold</li>\n<li><strong>retrack_threshold_sin(float, def=0.5):</strong>  sin retracker threshold</li>\n<li><strong>retrack_smooth_wf(bool, def=False):</strong>  specify whether to retrack raw or smoothed waveform\nFalse - raw waveform  |  True - smoothed waveform</li>\n<li><strong>debug_flag(bool, def=False):</strong>  set to True to output intermediate debugging output text</li>\n<li><strong>plot_flag(bool, def=False):</strong>  set to True to plot waveforms and retracking points for testing</li>\n<li><strong>measurement_index(int, def=None):</strong>  if not None, only retrack this measurement index (from 0)</li>\n<li><strong>include_measurements_array(List[bool],def=None):</strong>  None or [array of boolean values of size\n equal to number of waveforms].\nif not None, only retrack waveforms\ncorresponding to True values in this array</li>\n<li><strong>savitsky_golay_smoothing(bool, def=True):</strong>  if True then use a 1-d Savitsky-Golay filter to\nsmooth waveform</li>\n<li><strong>savitsky_golay_width(int, def=9):</strong>  Savitsky Golay smoothing width</li>\n<li><strong>savitsky_golay_poly_order(int, def=3):</strong>  Savitsky Golay polynomial order</li>\n<li><strong>ref_bin_ind_lrm(int, def=64):</strong>  from CS2 Baseline-D User Manual, p36;</li>\n<li><strong>ref_bin_ind_sin(int, def=512):</strong>  from CS2 Baseline-D User Manual, p36</li>\n<li><strong>noise_sample_limit(int, def=6):</strong>  maximum bin used to compute noise statistics</li>\n<li><strong>wf_oversampling_factor(int,def=100):</strong>  waveform oversampling factor</li>\n<li><strong>noise_threshold(float, def=0.3):</strong>  if mean amplitude in noise bins exceeds threshold then\nreject waveform</li>\n<li><strong>le_id_threshold(float, def=0.05):</strong>  power must exceed thermal noise by this amount to be\nidentified as a leading edge</li>\n<li><strong>le_dp_threshold(float, def=0.20):</strong>  define threshold on normalised amplitude change which\nis required to be accepted as lead edge</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple (dr_bin_tcog, dr_meters_tcog, leading_edge_start, leading_edge_stop,\n  pwr_at_rtrk_point_tcog,n_retracker_failures,retrack_flag):\n      dr_bin_tcog (List[float]) : tcog epoch relative to nominal tracking point\n                                    in bins\n      dr_meters_tcog (List[float]) : tcog epoch relative to nominal tracking point\n                                  in meters\n      leading_edge_start (List[List[float]]): leading edge start coordinates\n                                          column 1 = bin  |  column 2 = normalised power\n      leading_edge_stop (List[List[float]]): leading edge stop coordinates\n                                          column 1 = bin  |  column 2 = normalised power\n      pwr_at_rtrk_point_tcog (List[float]): power in counts at retracking point\n      n_retracker_failures (int): number of waveforms were retracking failed\n      retrack_flag : returned retracker flags for each waveform indicate how\n                     retracking failed\n                     col 1 (index 0): 0 or 1 if noise &gt; threshold in noise gates\n                     col 2 (index 1): 0 or 1 if no samples are sufficiently above\n                                      the noise floor\n                     col 3 (index 2): 0 or 1 if no waveform peak can be identified\n                                      after the leading edge starts\n                     col 4 (index 3): 0 or 1 if no leading edge found by end of waveform\n                     col 5 (index 4): 0 (currently unused)\n                     col 6 (index 5): 0 or 1 if  TCOG retracking point could not be found</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">waveforms</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">retrack_threshold_lrm</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">retrack_threshold_sin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">retrack_smooth_wf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">debug_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">measurement_index</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_measurements_array</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_smoothing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_poly_order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">ref_bin_ind_lrm</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">ref_bin_ind_sin</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>,</span><span class=\"param\">\t<span class=\"n\">noise_sample_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">wf_oversampling_factor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.3</span>,</span><span class=\"param\">\t<span class=\"n\">le_id_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">le_dp_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.fastsmooth", "modulename": "clev2er.utils.cs2.retrackers.fastsmooth", "kind": "module", "doc": "<p>fastsmooth() : smoothing function port from Matlab</p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.fastsmooth.fastsmooth", "modulename": "clev2er.utils.cs2.retrackers.fastsmooth", "qualname": "fastsmooth", "kind": "function", "doc": "<p>port of Matlab fastsmooth function, Copyright (c) 2012, Thomas C. O'Haver\n<a href=\"https://uk.mathworks.com/matlabcentral/fileexchange/19998-fast-smoothing-function?s_tid=srchtitle\">https://uk.mathworks.com/matlabcentral/fileexchange/19998-fast-smoothing-function?s_tid=srchtitle</a>\nwith taper=1, edge=1 preset</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_array</strong>:    input 1-d array to be smoothed</li>\n<li><strong>smoothwidth</strong>:  smoothing width</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>smoothed 1-d array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_array</span>, </span><span class=\"param\"><span class=\"n\">smoothwidth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests", "modulename": "clev2er.utils.cs2.retrackers.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker", "kind": "module", "doc": "<p>pytest unit tests for : cpom/altimetry/level2/cs2/retrackers/cs2_sin_max_coherence_retracker:\nretrack_cs2_sin_max_coherence_retracker()</p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker.lrm_file", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker", "qualname": "lrm_file", "kind": "function", "doc": "<p>fixture</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: path of LRM L1b file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker.sin_file", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker", "qualname": "sin_file", "kind": "function", "doc": "<p>fixture</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: path of SIN L1b file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker.test_retrack_cs2_sin_max_coherence", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker", "qualname": "test_retrack_cs2_sin_max_coherence", "kind": "function", "doc": "<p>test of retrack_cs2_sin_max_coherence</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sin_file (str):</strong>  path</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sin_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker.test_retrack_cs2_sin_max_coherence_with_lrm", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker", "qualname": "test_retrack_cs2_sin_max_coherence_with_lrm", "kind": "function", "doc": "<p>_summary_</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lrm_file (str):</strong>  path</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lrm_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker.test_retrack_cs2_sin_max_coherence_at_index", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_sin_max_coherence_retracker", "qualname": "test_retrack_cs2_sin_max_coherence_at_index", "kind": "function", "doc": "<p>test of retrack_cs2_sin_max_coherence at index</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sin_file (str):</strong>  path</li>\n<li><strong>measurement_index (int):</strong>  _description_</li>\n<li><strong>expected_success (int):</strong>  _description_</li>\n<li><strong>expected_retracking_bin (float):</strong>  _description_</li>\n<li><strong>expected_leading_edge_start (float):</strong>  _description_</li>\n<li><strong>expected_leading_edge_end (float):</strong>  _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sin_file</span>,</span><span class=\"param\">\t<span class=\"n\">measurement_index</span>,</span><span class=\"param\">\t<span class=\"n\">expected_success</span>,</span><span class=\"param\">\t<span class=\"n\">expected_retracking_bin</span>,</span><span class=\"param\">\t<span class=\"n\">expected_leading_edge_start</span>,</span><span class=\"param\">\t<span class=\"n\">expected_leading_edge_end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker", "kind": "module", "doc": "<hr />\n\n<p>pytest unit tests for : cpom/altimetry/level2/cs2/retrackers/cs2_tcog_retracker:\nretrack_tcog_waveforms_cs2()</p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker.lrm_file", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker", "qualname": "lrm_file", "kind": "function", "doc": "<p>fixture</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: path of LRM L1b file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker.sin_file", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker", "qualname": "sin_file", "kind": "function", "doc": "<p>fixture</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: path of SIN L1b file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker.test_retrack_tcog_waveforms_cs2_sin", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker", "qualname": "test_retrack_tcog_waveforms_cs2_sin", "kind": "function", "doc": "<p>test of retrack_tcog_waveforms_cs2_sin</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sin_file (str):</strong>  L1b SIN file path</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sin_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker.test_retrack_tcog_waveforms_cs2", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker", "qualname": "test_retrack_tcog_waveforms_cs2", "kind": "function", "doc": "<p>test of retrack_tcog_waveforms_cs2</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lrm_file (str):</strong>  L1b LRM file path</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lrm_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker.test_retrack_tcog_waveforms_cs2_at_index", "modulename": "clev2er.utils.cs2.retrackers.tests.test_cs2_tcog_retracker", "qualname": "test_retrack_tcog_waveforms_cs2_at_index", "kind": "function", "doc": "<p>test of retrack_tcog_waveforms_cs2 at specific indices</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lrm_file (str):</strong>  path of LRM 1b file</li>\n<li><strong>measurement_index (int):</strong>  _description_</li>\n<li><strong>expected_success (int):</strong>  _description_</li>\n<li><strong>expected_retracking_bin (float):</strong>  _description_</li>\n<li><strong>expected_leading_edge_start (float):</strong>  _description_</li>\n<li><strong>expected_leading_edge_end (float):</strong>  _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lrm_file</span>,</span><span class=\"param\">\t<span class=\"n\">measurement_index</span>,</span><span class=\"param\">\t<span class=\"n\">expected_success</span>,</span><span class=\"param\">\t<span class=\"n\">expected_retracking_bin</span>,</span><span class=\"param\">\t<span class=\"n\">expected_leading_edge_start</span>,</span><span class=\"param\">\t<span class=\"n\">expected_leading_edge_end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.waveform_quality", "modulename": "clev2er.utils.cs2.waveform_quality", "kind": "module", "doc": "<p>**CS2 Waveform Quality Modules</p>\n"}, {"fullname": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "modulename": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "kind": "module", "doc": "<p>Waveform QC checks for CryoSat</p>\n"}, {"fullname": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks.sarin_waveform_qc_checks", "modulename": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "qualname": "sarin_waveform_qc_checks", "kind": "function", "doc": "<p>Inputs:\npwr_waveform_20_ku   :  numpy.ndarray of shape (num_measurements, waveform_numbins).\n                waveform_numbins is 128 (LRM) or 1024 (SIN)\n               This is the array returned by :\n               waveforms = nc.variables['pwr_waveform_20_ku'][:].data</p>\n\n<p>Return values:</p>\n\n<p>waveforms_ok :  boolean array of True (waveform ok), False (waveform not suitable)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pwr_waveform_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_factor_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_pwr_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">noise_power_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">total_power_threshold</span><span class=\"o\">=</span><span class=\"mf\">5e-17</span>,</span><span class=\"param\">\t<span class=\"n\">low_peakiness_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">low_position_max_power</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">high_position_max_power</span><span class=\"o\">=</span><span class=\"mi\">1011</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks.lrm_waveform_qc_checks", "modulename": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "qualname": "lrm_waveform_qc_checks", "kind": "function", "doc": "<p>Inputs:\npwr_waveform_20_ku   :  numpy.ndarray of shape (num_measurements, waveform_numbins).\n                waveform_numbins is 128 (LRM) or 1024 (SIN)\n               This is the array returned by :\n               waveforms = nc.variables['pwr_waveform_20_ku'][:].data</p>\n\n<p>Return values:</p>\n\n<p>waveforms_ok :  boolean array of True (waveform ok), False (waveform not suitable)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pwr_waveform_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_factor_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_pwr_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">total_power_threshold</span><span class=\"o\">=</span><span class=\"mf\">3e-16</span>,</span><span class=\"param\">\t<span class=\"n\">low_peakiness_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.85</span>,</span><span class=\"param\">\t<span class=\"n\">high_peakiness_threshold</span><span class=\"o\">=</span><span class=\"mf\">2.8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems", "modulename": "clev2er.utils.dems", "kind": "module", "doc": "<p><strong>DEM class</strong></p>\n"}, {"fullname": "clev2er.utils.dems.dems", "modulename": "clev2er.utils.dems.dems", "kind": "module", "doc": "<p>clev2er.utils.dems.dems</p>\n\n<p>DEM class to read and interpolate DEMs</p>\n"}, {"fullname": "clev2er.utils.dems.dems.Dem", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem", "kind": "class", "doc": "<p>class to load and interpolate Polar DEMs</p>\n"}, {"fullname": "clev2er.utils.dems.dems.Dem.__init__", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  DEM name id, must be in global dem_list</li>\n<li><strong>filled (bool, optional):</strong>  Use filled version of DEM if True. Defaults to True.</li>\n<li><strong>config (dict, optional):</strong>  configuration dictionary, defaults to None</li>\n<li><strong>dem_dir (str, optional):</strong>  path of directory containing DEM. Defaults to None</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/accesses zdem array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  when name not in global dem_list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dem_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.dems.dems.Dem.get_geotiff_extent", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.get_filename", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.get_filename", "kind": "function", "doc": "<p>Find the path of the DEM file from dir and file names :\nFor the directory, it is chosen in order of preference:\na) self.config[\"dem_dirs\"][self.name], or\nb) supplied self.dem_dir, or\nc) default_dir\nThe file name is:\nfilename: is self.filled use filled_filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_dir (str):</strong>  default dir to find DEM file names</li>\n<li><strong>filename (str):</strong>  file name of DEM (not filled)</li>\n<li><strong>filled_filename (str):</strong>  file name of DEM (not filled)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str : path of DEM file</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OSError :</strong>  directory or file not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filled_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.clean_up", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith DEM</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.load_npz", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.load_npz", "kind": "function", "doc": "<p>Load DEM from npz format file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>npz_file (str):</strong>  path of npz file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">npz_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.load_zarr", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.load_zarr", "kind": "function", "doc": "<p>Load a .zarr file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  path of .zarr file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.load_geotiff", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.load_geotiff", "kind": "function", "doc": "<p>Load a GeoTIFF file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  path of GeoTIFF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.load", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.load", "kind": "function", "doc": "<p>load the DEM</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: DEM loaded ok (True), failed (False)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.get_segment", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.get_segment", "kind": "function", "doc": "<p>return a cropped segment of the DEM, flattened or as a grid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>segment_bounds (List):</strong>  [(minx,maxx),(miny,maxy)]</li>\n<li><strong>grid_xy (bool, optional):</strong>  return segment as a grid. Defaults to True.</li>\n<li><strong>flatten (bool, optional):</strong>  return segment as flattened list. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[np.ndarray, np.ndarray, np.ndarray]: (xdem,ydem,zdem)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segment_bounds</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">grid_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flatten</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.chunked_interpolation", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.chunked_interpolation", "kind": "function", "doc": "<p>Interpolate DEM in chunks to handle large datasets efficiently.</p>\n\n<p>This function performs interpolation on a DEM stored in a Zarr array by\nextracting relevant chunks and creating a sub-grid for interpolation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Array of x coordinates in the DEM's projection (in meters).</li>\n<li><strong>y (np.ndarray):</strong>  Array of y coordinates in the DEM's projection (in meters).</li>\n<li><strong>myydem (np.ndarray):</strong>  Flipped y coordinates corresponding to the DEM grid.</li>\n<li><strong>xdem (np.ndarray):</strong>  x coordinates corresponding to the DEM grid.</li>\n<li><strong>method (str):</strong>  Interpolation method to use ('linear', 'nearest', etc.).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Interpolated DEM elevation values at the specified coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">myydem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xdem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.interp_dem", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.interp_dem", "kind": "function", "doc": "<p>Interpolate DEM to return elevation values corresponding to\n   cartesian x,y in DEM's projection or lat,lon values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x cartesian coordinates in the DEM's projection in m, or lat values</li>\n<li><strong>y (np.ndarray):</strong>  x cartesian coordinates in the DEM's projection in m, or lon values</li>\n<li><strong>method (str, optional):</strong>  linear, nearest, splinef2d. Defaults to \"linear\".</li>\n<li><strong>xy_is_latlon (bool, optional):</strong>  if True, x,y are lat, lon values. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: interpolated dem elevation values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>, </span><span class=\"param\"><span class=\"n\">xy_is_latlon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.gaussian_smooth", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.gaussian_smooth", "kind": "function", "doc": "<p>perform a gaussian smooth on the current loaded DEM\nsigma : degree of smoothing, def=1.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.hillshade", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.hillshade", "kind": "function", "doc": "<p>Convert the DEM 'z_dem' values to a hillshade value between 0..255\nazimuth: angle in degrees (0..360)\npitch : angle in degrees (0..90)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">azimuth</span><span class=\"o\">=</span><span class=\"mi\">225</span>, </span><span class=\"param\"><span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">45</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.geotiff_to_zarr", "modulename": "clev2er.utils.dems.geotiff_to_zarr", "kind": "module", "doc": "<p>Utility to convert Geotiff format DEM files to Zarr format using a\nchunk size equivalent to the CS2 beamwidth or a selectable chunk size</p>\n"}, {"fullname": "clev2er.utils.dems.geotiff_to_zarr.DEMConverter", "modulename": "clev2er.utils.dems.geotiff_to_zarr", "qualname": "DEMConverter", "kind": "class", "doc": "<p>Class to convert Geotiff format DEMs to zarr</p>\n"}, {"fullname": "clev2er.utils.dems.geotiff_to_zarr.DEMConverter.get_geotiff_extent", "modulename": "clev2er.utils.dems.geotiff_to_zarr", "qualname": "DEMConverter.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.geotiff_to_zarr.DEMConverter.convert_geotiff_to_zarr", "modulename": "clev2er.utils.dems.geotiff_to_zarr", "qualname": "DEMConverter.convert_geotiff_to_zarr", "kind": "function", "doc": "<p>Convert a GeoTIFF file to Zarr format and create a flipped version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  Path of GeoTIFF file.</li>\n<li><strong>zarrfile (str):</strong>  Path where the original Zarr file will be saved.</li>\n<li><strong>flipped_zarrfile (str):</strong>  Path where the flipped Zarr file will be saved.</li>\n<li><strong>chunk_width (int, optional):</strong>  chunk size in m (def = 20000 (ie 20km))</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">zarrfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">flipped_zarrfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.geotiff_to_zarr.main", "modulename": "clev2er.utils.dems.geotiff_to_zarr", "qualname": "main", "kind": "function", "doc": "<p>main function for command line tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.tests", "modulename": "clev2er.utils.dems.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.dems.tests.test_dems", "modulename": "clev2er.utils.dems.tests.test_dems", "kind": "module", "doc": "<p>pytests for Dem class</p>\n"}, {"fullname": "clev2er.utils.dems.tests.test_dems.test_dems", "modulename": "clev2er.utils.dems.tests.test_dems", "qualname": "test_dems", "kind": "function", "doc": "<p>load DEMs and test interpolated elevations to tolerance of 1m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name (str):</strong>  _description_</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">elevs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.tests.test_dems.test_dems_zarr", "modulename": "clev2er.utils.dems.tests.test_dems", "qualname": "test_dems_zarr", "kind": "function", "doc": "<p>load Zarr format DEMs and test interpolated elevations to tolerance of 1m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name_zarr (str):</strong>  _description_</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name_zarr</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">elevs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.tests.test_dems.test_compare_dems_zarr_and_tiff", "modulename": "clev2er.utils.dems.tests.test_dems", "qualname": "test_compare_dems_zarr_and_tiff", "kind": "function", "doc": "<p>Compare zarr and tiff DEMs to a tolerance of 0.001m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name (str):</strong>  name of Dem object using Tiff format</li>\n<li><strong>dem_name_zarr (str):</strong>  name of Dem object using Zarr format</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name</span>, </span><span class=\"param\"><span class=\"n\">dem_name_zarr</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dhdt_data", "modulename": "clev2er.utils.dhdt_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.dhdt_data.dhdt", "modulename": "clev2er.utils.dhdt_data.dhdt", "kind": "module", "doc": "<p>clev2er.utils.dhdt_data.dhdt</p>\n\n<p>class to read dh/dt grid data</p>\n"}, {"fullname": "clev2er.utils.dhdt_data.dhdt.Dhdt", "modulename": "clev2er.utils.dhdt_data.dhdt", "qualname": "Dhdt", "kind": "class", "doc": "<p>class to load and interpolate dh/dt gridded data set resources</p>\n"}, {"fullname": "clev2er.utils.dhdt_data.dhdt.Dhdt.__init__", "modulename": "clev2er.utils.dhdt_data.dhdt", "qualname": "Dhdt.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  name of dh/dt data set</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n<li><strong>config (dict, optional):</strong>  configuration dictionary, defaults to None</li>\n<li><strong>dhdt_dir (str, optional):</strong>  path of directory containing dh/dt file. Defaults to None</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if name not supported in dhdt_list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dhdt_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.dhdt_data.dhdt.Dhdt.get_geotiff_extent", "modulename": "clev2er.utils.dhdt_data.dhdt", "qualname": "Dhdt.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dhdt_data.dhdt.Dhdt.load_geotiff", "modulename": "clev2er.utils.dhdt_data.dhdt", "qualname": "Dhdt.load_geotiff", "kind": "function", "doc": "<p>Load a GeoTIFF file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dhdt_file (str):</strong>  path of GeoTIFF</li>\n<li><strong>flip_y (bool):</strong>  if True flip the dhdt data in y dirn</li>\n<li><strong>median_filter_width (int|None):</strong>  median filter width</li>\n<li><strong>abs_filter (int| None):</strong>  set dhdt to np.Nan where abs(dhdt) &gt; abs_filter</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dhdt_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">flip_y</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">median_filter_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">abs_filter</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dhdt_data.dhdt.Dhdt.load", "modulename": "clev2er.utils.dhdt_data.dhdt", "qualname": "Dhdt.load", "kind": "function", "doc": "<p>Read the dhdt file, setting up required variables</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if self.name not found in allowed list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dhdt_data.dhdt.Dhdt.interp_dhdt", "modulename": "clev2er.utils.dhdt_data.dhdt", "qualname": "Dhdt.interp_dhdt", "kind": "function", "doc": "<p>Interpolate DEM to return elevation values corresponding to\n   cartesian x,y in DEM's projection or lat,lon values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x cartesian coords in the dhdt grid's projection in m, or lat values</li>\n<li><strong>y (np.ndarray):</strong>  x cartesian coords in the dhdt grid's projection in m, or lon values</li>\n<li><strong>method (str, optional):</strong>  linear, nearest, splinef2d. Defaults to \"linear\".</li>\n<li><strong>xy_is_latlon (bool, optional):</strong>  if True, x,y are lat, lon values. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: interpolated dhdt values in m/yr</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span>, </span><span class=\"param\"><span class=\"n\">xy_is_latlon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dhdt_data.dhdt.Dhdt.get_filename", "modulename": "clev2er.utils.dhdt_data.dhdt", "qualname": "Dhdt.get_filename", "kind": "function", "doc": "<p>Find the path of the dhdt file from dir and file names :\nFor the directory, it is chosen in order of preference:\na) self.config[\"dhdt_data_dir\"][self.name], or\nb) supplied self.dhdt_dir, or\nc) default_dir\nThe file name is:\nfilename: is filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_dir (str):</strong>  default dir to find dhdt file names</li>\n<li><strong>filename (str):</strong>  file name of dhdt</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str : path of dhdt file</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OSError :</strong>  directory or file not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dhdt_data.tests", "modulename": "clev2er.utils.dhdt_data.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.dhdt_data.tests.test_dhdt", "modulename": "clev2er.utils.dhdt_data.tests.test_dhdt", "kind": "module", "doc": "<p>pytests for clev2er.utils.dhdt_data.dhdt</p>\n"}, {"fullname": "clev2er.utils.dhdt_data.tests.test_dhdt.test_dhdt", "modulename": "clev2er.utils.dhdt_data.tests.test_dhdt", "qualname": "test_dhdt", "kind": "function", "doc": "<p>pytest function to test Dhdt() class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dhdt_name</span>, </span><span class=\"param\"><span class=\"n\">limits</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">outfile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dhdt_data.tests.test_dhdt.test_grn_diff", "modulename": "clev2er.utils.dhdt_data.tests.test_dhdt", "qualname": "test_grn_diff", "kind": "function", "doc": "<p>pytest to calc diff between slater and smith dh/dt solutions over grn</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.logging_funcs", "modulename": "clev2er.utils.logging_funcs", "kind": "module", "doc": "<p>logging helper functions:</p>\n\n<p>get_logger() :  sets up logging system to write log.ERROR, INFO, DEBUG to separate\n                log files, and also output to stdout</p>\n"}, {"fullname": "clev2er.utils.logging_funcs.get_logger", "modulename": "clev2er.utils.logging_funcs", "qualname": "get_logger", "kind": "function", "doc": "<p>Setup Logging handlers</p>\n\n<ul>\n<li>direct log.ERROR messages -> separate log file</li>\n<li>direct log.INFO (including log.ERROR, log.WARNING) -> separate log file</li>\n<li>direct log.DEBUG (including log.ERROR, log.WARNING, log.INFO) -> separate log file</li>\n<li>direct all allowed levels to stout</li>\n<li>set maximum allowed log level (applies to all outputs, default is log.INFO,</li>\n<li>ie no log.DEBUG messages will be included by default)</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>log_format (str) :</strong>  formatting string for logger</li>\n<li><strong>log_name (str) :</strong> </li>\n<li><strong>log_file_info (str) :</strong>  path of log file to use for INFO logs</li>\n<li><strong>log_file_error (str) :</strong>  path of log file to use for ERROR logs</li>\n<li><strong>log_file_debug (str) :</strong>  path of log file to use for DEBUG logs</li>\n<li><strong>default_log_level () :</strong>  default=logging.INFO</li>\n<li><strong>silent (bool) :</strong>  if True do not output to stdout, default=False</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>log object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">log_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;[</span><span class=\"si\">%(levelname)-2s</span><span class=\"s1\">] : </span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> : </span><span class=\"si\">%(message)s</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_format_debug</span><span class=\"o\">=</span><span class=\"s1\">&#39;[</span><span class=\"si\">%(levelname)-2s</span><span class=\"s1\">] : </span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> : </span><span class=\"si\">%(name)-12s</span><span class=\"s1\"> :  </span><span class=\"si\">%(message)s</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_info</span><span class=\"o\">=</span><span class=\"s1\">&#39;info.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_error</span><span class=\"o\">=</span><span class=\"s1\">&#39;err.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_debug</span><span class=\"o\">=</span><span class=\"s1\">&#39;debug.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">default_log_level</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks", "modulename": "clev2er.utils.masks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.masks.masks", "modulename": "clev2er.utils.masks.masks", "kind": "module", "doc": "<p>Class for area masking</p>\n"}, {"fullname": "clev2er.utils.masks.masks.Mask", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask", "kind": "class", "doc": "<p>class to handle area masking</p>\n"}, {"fullname": "clev2er.utils.masks.masks.Mask.__init__", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name, must be in global mask_list</li>\n<li><strong>basin_numbers (list[int], optional):</strong>  list of grid values to select from grid masks\ndef=None</li>\n<li><strong>mask_path (str, optional):</strong>  override default path of mask data file</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/access mask array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mask_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.masks.masks.Mask.load_netcdf_mask", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.load_netcdf_mask", "kind": "function", "doc": "<p>load mask array from netcdf grid masks</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_file (str) :</strong>  path of netcdf mask file</li>\n<li><strong>flip (bool, optional):</strong>  _description_. Defaults to True.</li>\n<li><strong>nc_mask_var (str):</strong>  variable name in netcdf file containing mask data, def='mask'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">nc_mask_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mask&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.load_npz_mask", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.load_npz_mask", "kind": "function", "doc": "<p>load mask array from npz grid masks</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_file (str) :</strong>  path of npz mask file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.points_inside", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.points_inside", "kind": "function", "doc": "<p>Given a list of lat,lon or x,y points, find the points that are inside the current mask</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|list[float]):</strong>  list of latitude points</li>\n<li><strong>lons (np.ndarray|list[float]):</strong>  list of longitude points</li>\n<li><strong>basin_numbers (list[int,], optional):</strong>  list of basin numbers. Defaults to None.</li>\n<li><strong>inputs_are_xy (bool, optional):</strong>  lats, lons are already transformed to x,y.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>inmask(np.ndarray) : boolean array same size as input list, indicating whether\n  inputs points are inside (True) or outside (False) mask\n  n_inside (int) : number inside mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.grid_mask_values", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.grid_mask_values", "kind": "function", "doc": "<p>Return the grid mask value at each input lats, lons interpolated grid location</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude (N) values in degrees</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude (E) values in degrees</li>\n<li><strong>inputs_are_xy (bool):</strong>  inputs are x,y values (m) instead of latitude, longitude values</li>\n<li><strong>unknown_value (int):</strong>  value returned for locations outside mask, or where mask\ngrid includes an unclassified value (unknown_value will be\nsubstituted)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mask_values (np.ndarray): grid mask value at each input lats, lons interpolated\n                       grid location or np.NaN if outside area</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unknown_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.latlon_to_xy", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.latlon_to_xy", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lats</strong>:  latitude points in degs</li>\n<li><strong>lons</strong>:  longitude points in degrees E</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>x,y in polar stereo projection of mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.clean_up", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith mask</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.tests", "modulename": "clev2er.utils.masks.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.masks.tests.test_masks", "modulename": "clev2er.utils.masks.tests.test_masks", "kind": "module", "doc": "<p>pytests for masks.py: Mask class</p>\n"}, {"fullname": "clev2er.utils.masks.tests.test_masks.test_mask_points_inside", "modulename": "clev2er.utils.masks.tests.test_masks", "qualname": "test_mask_points_inside", "kind": "function", "doc": "<p>test of Mask.points_inside()</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  name of Mask</li>\n<li><strong>indices_inside (list[int]):</strong>  list of indices inside mask, or empty list []</li>\n<li><strong>num_inside (int):</strong>  number of points inside mask</li>\n<li><strong>lats (_type_):</strong>  _description_</li>\n<li><strong>lons (_type_):</strong>  _description_</li>\n<li><strong>grid_values (_type_):</strong>  _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_name</span>, </span><span class=\"param\"><span class=\"n\">indices_inside</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">grid_values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.tests.test_masks.test_mask_grid_mask_values", "modulename": "clev2er.utils.masks.tests.test_masks", "qualname": "test_mask_grid_mask_values", "kind": "function", "doc": "<p>test of Mask.grid_mask_values()</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name</li>\n<li><strong>lats (np.ndarray):</strong>  array of latitude N values in degs</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude E values in degs</li>\n<li><strong>expected_surface_type (list[int or nan]):</strong>  list of expected surface type values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_name</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">expected_surface_type</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.tests.test_masks.test_mask_loading", "modulename": "clev2er.utils.masks.tests.test_masks", "qualname": "test_mask_loading", "kind": "function", "doc": "<p>test loading mask file using non-default path</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.tests.test_shm", "modulename": "clev2er.utils.masks.tests.test_shm", "kind": "module", "doc": "<p>A test of loading DEMs using shared memory</p>\n"}, {"fullname": "clev2er.utils.masks.tests.test_shm.task", "modulename": "clev2er.utils.masks.tests.test_shm", "qualname": "task", "kind": "function", "doc": "<p>child process</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.orbits", "modulename": "clev2er.utils.orbits", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.orbits.find_orbit_directions", "modulename": "clev2er.utils.orbits.find_orbit_directions", "kind": "module", "doc": "<p>find direction of track from nadir latitudes</p>\n"}, {"fullname": "clev2er.utils.orbits.find_orbit_directions.find_orbit_directions", "modulename": "clev2er.utils.orbits.find_orbit_directions", "qualname": "find_orbit_directions", "kind": "function", "doc": "<p>Returns index of the start of ascending orbit and/or desc orbit\nor None</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray) :</strong>  array of latitude values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness", "modulename": "clev2er.utils.roughness", "kind": "module", "doc": "<p>clev2er.utils.roughness</p>\n\n<h1 id=\"class-roughness\">class : Roughness</h1>\n\n<p>Class to handle ice sheet rougness data</p>\n"}, {"fullname": "clev2er.utils.roughness.roughness", "modulename": "clev2er.utils.roughness.roughness", "kind": "module", "doc": "<p>clev2er.utils.roughness.roughness</p>\n\n<p>Roughness class to read and interpolate surface Roughness files</p>\n"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness", "kind": "class", "doc": "<p>class to load and interpolate Polar roughness</p>\n"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.__init__", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  roughness name id, must be in global roughness_list</li>\n<li><strong>filled (bool, optional):</strong>  Use filled version of roughness if True. Defaults to True.</li>\n<li><strong>config (dict, optional):</strong>  configuration dictionary, defaults to None</li>\n<li><strong>roughness_dir (str, optional):</strong>  path of directory containing roughness. Defaults to None</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/accesses zroughness array in</li>\n<li>SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  when name not in global roughness_list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.get_geotiff_extent", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.get_filename", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.get_filename", "kind": "function", "doc": "<p>Find the path of the roughness file from dir and file names :\nFor the directory, it is chosen in order of preference:\na) self.config[\"roughness_dirs\"][self.name], or\nb) supplied self.roughness_dir, or\nc) default_dir\nThe file name is:\nfilename: is self.filled use filled_filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_dir (str):</strong>  default dir to find roughness file names</li>\n<li><strong>filename (str):</strong>  file name of roughness (not filled)</li>\n<li><strong>filled_filename (str):</strong>  file name of roughness (not filled)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str : path of roughness file</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OSError :</strong>  directory or file not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filled_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.clean_up", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith roughness</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.load_npz", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.load_npz", "kind": "function", "doc": "<p>Load roughness from npz format file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>npz_file (str):</strong>  path of npz file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">npz_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.load_zarr", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.load_zarr", "kind": "function", "doc": "<p>Load a .zarr file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>roughnessfile (str):</strong>  path of .zarr file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">roughnessfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.load_geotiff", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.load_geotiff", "kind": "function", "doc": "<p>Load a GeoTIFF file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>roughnessfile (str):</strong>  path of GeoTIFF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">roughnessfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.load", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.load", "kind": "function", "doc": "<p>load the roughness</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: roughness loaded ok (True), failed (False)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.get_segment", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.get_segment", "kind": "function", "doc": "<p>return a cropped segment of the roughness, flattened or as a grid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>segment_bounds (List):</strong>  [(minx,maxx),(miny,maxy)]</li>\n<li><strong>grid_xy (bool, optional):</strong>  return segment as a grid. Defaults to True.</li>\n<li><strong>flatten (bool, optional):</strong>  return segment as flattened list. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[np.ndarray, np.ndarray, np.ndarray]: (xroughness,yroughness,zroughness)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segment_bounds</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">grid_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flatten</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.chunked_interpolation", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.chunked_interpolation", "kind": "function", "doc": "<p>Interpolate roughness in chunks to handle large datasets efficiently.</p>\n\n<p>This function performs interpolation on a roughness stored in a Zarr array by\nextracting relevant chunks and creating a sub-grid for interpolation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Array of x coordinates in the roughness's projection (in meters).</li>\n<li><strong>y (np.ndarray):</strong>  Array of y coordinates in the roughness's projection (in meters).</li>\n<li><strong>myyroughness (np.ndarray):</strong>  Flipped y coordinates corresponding to the roughness grid.</li>\n<li><strong>xroughness (np.ndarray):</strong>  x coordinates corresponding to the roughness grid.</li>\n<li><strong>method (str):</strong>  Interpolation method to use ('linear', 'nearest', etc.).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Interpolated roughness elevation values at the specified coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">myyroughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xroughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.interp_roughness", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.interp_roughness", "kind": "function", "doc": "<p>Interpolate roughness to return elevation values corresponding to\n   cartesian x,y in roughness's projection or lat,lon values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x cartesian coordinates in the roughness's projection in m, or lat vals</li>\n<li><strong>y (np.ndarray):</strong>  x cartesian coordinates in the roughness's projection in m, or lon vals</li>\n<li><strong>method (str, optional):</strong>  linear, nearest, splinef2d. Defaults to \"linear\".</li>\n<li><strong>xy_is_latlon (bool, optional):</strong>  if True, x,y are lat, lon values. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: interpolated roughness elevation values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>, </span><span class=\"param\"><span class=\"n\">xy_is_latlon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.gaussian_smooth", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.gaussian_smooth", "kind": "function", "doc": "<p>perform a gaussian smooth on the current loaded roughness\nsigma : degree of smoothing, def=1.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.roughness.Roughness.hillshade", "modulename": "clev2er.utils.roughness.roughness", "qualname": "Roughness.hillshade", "kind": "function", "doc": "<p>Convert the roughness 'z_roughness' values to a hillshade value between 0..255\nazimuth: angle in degrees (0..360)\npitch : angle in degrees (0..90)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">azimuth</span><span class=\"o\">=</span><span class=\"mi\">225</span>, </span><span class=\"param\"><span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">45</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.tests", "modulename": "clev2er.utils.roughness.tests", "kind": "module", "doc": "<p>tests for clev2er.utils.roughness</p>\n"}, {"fullname": "clev2er.utils.roughness.tests.test_roughness", "modulename": "clev2er.utils.roughness.tests.test_roughness", "kind": "module", "doc": "<p>test of clev2er.utils.roughness.roughness</p>\n"}, {"fullname": "clev2er.utils.roughness.tests.test_roughness.test_roughness", "modulename": "clev2er.utils.roughness.tests.test_roughness", "qualname": "test_roughness", "kind": "function", "doc": "<p>test loading all roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.tests.test_roughness.test_roughness_ant", "modulename": "clev2er.utils.roughness.tests.test_roughness", "qualname": "test_roughness_ant", "kind": "function", "doc": "<p>test Antarctic roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.tests.test_roughness.test_roughness_grn", "modulename": "clev2er.utils.roughness.tests.test_roughness", "qualname": "test_roughness_grn", "kind": "function", "doc": "<p>test Greenland roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.tests.test_roughness.test_slope_map_vostok", "modulename": "clev2er.utils.roughness.tests.test_roughness", "qualname": "test_slope_map_vostok", "kind": "function", "doc": "<p>test Antarctic roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.tests.test_roughness.test_slope_map_ant", "modulename": "clev2er.utils.roughness.tests.test_roughness", "qualname": "test_slope_map_ant", "kind": "function", "doc": "<p>test Antarctic roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.tests.test_roughness.test_slope_map_spirit", "modulename": "clev2er.utils.roughness.tests.test_roughness", "qualname": "test_slope_map_spirit", "kind": "function", "doc": "<p>test Antarctic roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.roughness.tests.test_roughness.test_slope_map_arctic", "modulename": "clev2er.utils.roughness.tests.test_roughness", "qualname": "test_slope_map_arctic", "kind": "function", "doc": "<p>test Antarctic slop scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.shm", "modulename": "clev2er.utils.shm", "kind": "module", "doc": "<p>A test of loading DEMs using shared memory</p>\n"}, {"fullname": "clev2er.utils.shm.task", "modulename": "clev2er.utils.shm", "qualname": "task", "kind": "function", "doc": "<p>child process</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes", "modulename": "clev2er.utils.slopes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.slopes.slopes", "modulename": "clev2er.utils.slopes.slopes", "kind": "module", "doc": "<p>clev2er.utils.slopes.slopes</p>\n\n<p>Slope class to read and interpolate surface slope files</p>\n"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes", "kind": "class", "doc": "<p>class to load and interpolate Polar slopes</p>\n"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.__init__", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  slopes name id, must be in global slope_list</li>\n<li><strong>filled (bool, optional):</strong>  Use filled version of slopes if True. Defaults to True.</li>\n<li><strong>config (dict, optional):</strong>  configuration dictionary, defaults to None</li>\n<li><strong>slopes_dir (str, optional):</strong>  path of directory containing slopes. Defaults to None</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/accesses zslopes array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  when name not in global slope_list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">slopes_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.get_geotiff_extent", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.get_filename", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.get_filename", "kind": "function", "doc": "<p>Find the path of the slopes file from dir and file names :\nFor the directory, it is chosen in order of preference:\na) self.config[\"slopes_dirs\"][self.name], or\nb) supplied self.slopes_dir, or\nc) default_dir\nThe file name is:\nfilename: is self.filled use filled_filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_dir (str):</strong>  default dir to find slopes file names</li>\n<li><strong>filename (str):</strong>  file name of slopes (not filled)</li>\n<li><strong>filled_filename (str):</strong>  file name of slopes (not filled)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str : path of slopes file</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OSError :</strong>  directory or file not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filled_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.clean_up", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith slopes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.load_npz", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.load_npz", "kind": "function", "doc": "<p>Load slopes from npz format file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>npz_file (str):</strong>  path of npz file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">npz_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.load_zarr", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.load_zarr", "kind": "function", "doc": "<p>Load a .zarr file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slopesfile (str):</strong>  path of .zarr file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">slopesfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.load_nc", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.load_nc", "kind": "function", "doc": "<p>load NetCDF slope files</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slopesfile (str):</strong>  path of netcdf slope file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">slopesfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.load_geotiff", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.load_geotiff", "kind": "function", "doc": "<p>Load a GeoTIFF file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slopesfile (str):</strong>  path of GeoTIFF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">slopesfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.load", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.load", "kind": "function", "doc": "<p>load the slopes</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: slopes loaded ok (True), failed (False)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.get_segment", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.get_segment", "kind": "function", "doc": "<p>return a cropped segment of the slopes, flattened or as a grid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>segment_bounds (List):</strong>  [(minx,maxx),(miny,maxy)]</li>\n<li><strong>grid_xy (bool, optional):</strong>  return segment as a grid. Defaults to True.</li>\n<li><strong>flatten (bool, optional):</strong>  return segment as flattened list. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[np.ndarray, np.ndarray, np.ndarray]: (xslopes,yslopes,zslopes)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segment_bounds</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">grid_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flatten</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.chunked_interpolation", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.chunked_interpolation", "kind": "function", "doc": "<p>Interpolate slopes in chunks to handle large datasets efficiently.</p>\n\n<p>This function performs interpolation on a slopes stored in a Zarr array by\nextracting relevant chunks and creating a sub-grid for interpolation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Array of x coordinates in the slopes's projection (in meters).</li>\n<li><strong>y (np.ndarray):</strong>  Array of y coordinates in the slopes's projection (in meters).</li>\n<li><strong>myyslopes (np.ndarray):</strong>  Flipped y coordinates corresponding to the slopes grid.</li>\n<li><strong>xslopes (np.ndarray):</strong>  x coordinates corresponding to the slopes grid.</li>\n<li><strong>method (str):</strong>  Interpolation method to use ('linear', 'nearest', etc.).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Interpolated slopes elevation values at the specified coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">myyslopes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xslopes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.interp_slopes", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.interp_slopes", "kind": "function", "doc": "<p>Interpolate slopes to return elevation values corresponding to\n   cartesian x,y in slopes's projection or lat,lon values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x cartesian coordinates in the slopes's projection in m, or lat values</li>\n<li><strong>y (np.ndarray):</strong>  x cartesian coordinates in the slopes's projection in m, or lon values</li>\n<li><strong>method (str, optional):</strong>  linear, nearest, splinef2d. Defaults to \"linear\".</li>\n<li><strong>xy_is_latlon (bool, optional):</strong>  if True, x,y are lat, lon values. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: interpolated slopes elevation values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>, </span><span class=\"param\"><span class=\"n\">xy_is_latlon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.gaussian_smooth", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.gaussian_smooth", "kind": "function", "doc": "<p>perform a gaussian smooth on the current loaded slopes\nsigma : degree of smoothing, def=1.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.slopes.Slopes.hillshade", "modulename": "clev2er.utils.slopes.slopes", "qualname": "Slopes.hillshade", "kind": "function", "doc": "<p>Convert the slopes 'z_slopes' values to a hillshade value between 0..255\nazimuth: angle in degrees (0..360)\npitch : angle in degrees (0..90)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">azimuth</span><span class=\"o\">=</span><span class=\"mi\">225</span>, </span><span class=\"param\"><span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">45</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.tests", "modulename": "clev2er.utils.slopes.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.slopes.tests.test_slopes", "modulename": "clev2er.utils.slopes.tests.test_slopes", "kind": "module", "doc": "<p>test of clev2er.utils.slopes.slopes</p>\n"}, {"fullname": "clev2er.utils.slopes.tests.test_slopes.test_slopes", "modulename": "clev2er.utils.slopes.tests.test_slopes", "qualname": "test_slopes", "kind": "function", "doc": "<p>test loading all slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.tests.test_slopes.test_slopes_ant", "modulename": "clev2er.utils.slopes.tests.test_slopes", "qualname": "test_slopes_ant", "kind": "function", "doc": "<p>test Antarctic slop scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.tests.test_slopes.test_slopes_grn", "modulename": "clev2er.utils.slopes.tests.test_slopes", "qualname": "test_slopes_grn", "kind": "function", "doc": "<p>test Greenland slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.tests.test_slopes.test_slope_map_vostok", "modulename": "clev2er.utils.slopes.tests.test_slopes", "qualname": "test_slope_map_vostok", "kind": "function", "doc": "<p>test Antarctic slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.tests.test_slopes.test_slope_map_ant", "modulename": "clev2er.utils.slopes.tests.test_slopes", "qualname": "test_slope_map_ant", "kind": "function", "doc": "<p>test Antarctic slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.tests.test_slopes.test_slope_map_spirit", "modulename": "clev2er.utils.slopes.tests.test_slopes", "qualname": "test_slope_map_spirit", "kind": "function", "doc": "<p>test Antarctic slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.slopes.tests.test_slopes.test_slope_map_arctic", "modulename": "clev2er.utils.slopes.tests.test_slopes", "qualname": "test_slope_map_arctic", "kind": "function", "doc": "<p>test Antarctic slop scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.time", "modulename": "clev2er.utils.time", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.time.grain", "modulename": "clev2er.utils.time.grain", "kind": "module", "doc": "<p>Author: Nick Bearson, nickb@ssec.wisc.edu\nCopyright (c) 2014 University of Wisconsin SSEC. All rights reserved.\nGet new leap second files @ <a href=\"https://www.ietf.org/timezones/data/leap-seconds.list\">https://www.ietf.org/timezones/data/leap-seconds.list</a></p>\n"}, {"fullname": "clev2er.utils.time.grain.Grain", "modulename": "clev2er.utils.time.grain", "qualname": "Grain", "kind": "class", "doc": "<p>An object for parsing and utilizing the information contained in a leap second file.\nInitialize with a file object, ie: the result of open(...)</p>\n"}, {"fullname": "clev2er.utils.time.grain.Grain.utc2tai", "modulename": "clev2er.utils.time.grain", "qualname": "Grain.utc2tai", "kind": "function", "doc": "<p>Takes datetime object (utc) and returns TAI seconds since given epoch.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">utc</span>, </span><span class=\"param\"><span class=\"n\">epoch</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.time.grain.Grain.tai2utc", "modulename": "clev2er.utils.time.grain", "qualname": "Grain.tai2utc", "kind": "function", "doc": "<p>Takes TAI seconds since given epoch and returns a datetime.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seconds_since_epoch</span>, </span><span class=\"param\"><span class=\"n\">epoch</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty", "modulename": "clev2er.utils.uncertainty", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.uncertainty.calc_uncertainty", "modulename": "clev2er.utils.uncertainty.calc_uncertainty", "kind": "module", "doc": "<p>Cryo-TEMPO land ice elevation uncertainty functions</p>\n\n<p>calc_uncertainty()  : maps input slope values -> elevation uncertainty, using a table of</p>\n\n<p>uncertainty values per slope band</p>\n\n<p>Author: Alan Muir , DTU (initial design, coding)\nDate: 2021\nCopyright: UCL/MSSL/CPOM. Not to be used outside CPOM/MSSL without permission of author</p>\n"}, {"fullname": "clev2er.utils.uncertainty.calc_uncertainty.calc_uncertainty", "modulename": "clev2er.utils.uncertainty.calc_uncertainty", "qualname": "calc_uncertainty", "kind": "function", "doc": "<h6 id=\"purpose\">Purpose:</h6>\n\n<blockquote>\n  <p>return the corresponding interpolated uncertainties for a list of input slope values\n  from an uncertainty table, which contains the uncertainty values calculated for a\n  range of slope bands</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slopes:</strong>  list of input slope values, type ndarray of float</li>\n<li><strong>uncertainty_table:</strong>  list of uncertainty values for each band of slope, the table corresponds</li>\n<li>to n slope bands between min_slope and max_slope, where n is</li>\n<li>(max_slope - min_slope) / len(uncertainty_table), type ndarray of float</li>\n<li><strong>min_slope:</strong>   minimum slope value of uncertainty_table</li>\n<li><strong>max_slope:</strong>   maximum slope value of uncertainty_table</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>uncertainty: list of uncertainty values corresponding to each input slope value,\n  type ndarray</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slopes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">uncertainty_table</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">min_slope</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_slope</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing", "kind": "module", "doc": "<h1 id=\"uncertainty-pre-processing\">Uncertainty Pre-processing</h1>\n"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_1d_uncertainty", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_1d_uncertainty", "kind": "module", "doc": "<p>Purpose: Convert (cs2-is2)dh results to 1d slope table</p>\n\n<h6 id=\"outputs\">Outputs  :</h6>\n\n<blockquote>\n  <ul>\n  <li>1d uncertainty table</li>\n  </ul>\n</blockquote>\n\n<p>Author: Alan Muir (MSSL/UCL)\nDate: 2022\nCopyright: UCL/MSSL/CPOM. Not to be used outside CPOM/MSSL without permission of author</p>\n\n<p>History:</p>\n"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_1d_uncertainty.calc_mad", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_1d_uncertainty", "qualname": "calc_mad", "kind": "function", "doc": "<p>calculate median absolute deviation (MAD)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.array):</strong>  array of float values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: MAD value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_1d_uncertainty.main", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_1d_uncertainty", "qualname": "main", "kind": "function", "doc": "<p>main function for tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_bilinear_fit", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_bilinear_fit", "kind": "module", "doc": "<p>Converts 2d uncertainty table to a bilinear model fit</p>\n"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_bilinear_fit.load_table_from_pickle", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_bilinear_fit", "qualname": "load_table_from_pickle", "kind": "function", "doc": "<p>Load the binned table from a Pickle file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_bilinear_fit.save_table_as_pickle", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_bilinear_fit", "qualname": "save_table_as_pickle", "kind": "function", "doc": "<p>Save the binned table as a Pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>binned_table (pd.DataFrame):</strong>  The binned median absolute elevation difference table.</li>\n<li><strong>filename (str):</strong>  The path to the file where the table will be saved.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_bilinear_fit.main", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_bilinear_fit", "qualname": "main", "kind": "function", "doc": "<p>main function for tool</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "kind": "module", "doc": "<p>cryotempo_2d_uncertainty</p>\n\n<p>Purpose: Calculate a 2D uncertainty table using  slope &amp; roughness bins\nat 0.1 degree steps from 0 to 2 degrees, and m</p>\n\n<p>Slope &amp; Roughness interpolated from\nAIS:\nSlopes(\"rema_100m_900ws_slopes_zarr\") or Slopes(\"cpom_ant_2018_1km_slopes\")\nRoughness(\"rema_100m_900ws_roughness_zarr\")\nGrn:\nSlopes(\"arcticdem_100m_900ws_slopes_zarr\")\nRoughness(\"arcticdem_100m_900ws_roughness_zarr\")</p>\n\n<p>Input is dh values, lat, lon from CS2-IS2 differences npz files, for example:\n[cs2_minus_is2_gt2lgt2r_p2p_diffs_antarctica_icesheets.npz\n[cs2_minus_is2_gt2lgt2r_p2p_diffs_greenland.npz</p>\n\n<p>example usage: \npython cryotempo_2d_uncertainty.py -a -m median     -dh_file ~/downloads/cs2_minus_is2_gt2lgt2r_p2p_diffs_antarctica_icesheets.npz\npython cryotempo_2d_uncertainty.py -g -m median     -dh_file ~/downloads/cs2_minus_is2_gt2lgt2r_p2p_diffs_greenland.npz</p>\n"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty.calculate_binned_median", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "qualname": "calculate_binned_median", "kind": "function", "doc": "<p>Calculate the median absolute elevation differences within slope and roughness bins.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delta_elevation (np.ndarray):</strong>  Array of elevation differences between\ntwo measurement techniques.</li>\n<li><strong>slope (np.ndarray):</strong>  Array of surface slopes in meters.</li>\n<li><strong>roughness (np.ndarray):</strong>  Array of surface roughness values in meters.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: A pivot table where rows correspond to slope bins, columns to roughness bins,\n                and values to the median absolute elevation difference within each bin.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">delta_elevation</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty.calculate_binned_mad", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "qualname": "calculate_binned_mad", "kind": "function", "doc": "<p>Calculate the median absolute deviation (MAD) of elevation differences within slope\n  and roughness bins.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delta_elevation (np.ndarray):</strong>  Array of elevation differences between two measurement\ntechniques.</li>\n<li><strong>slope (np.ndarray):</strong>  Array of surface slopes in meters.</li>\n<li><strong>roughness (np.ndarray):</strong>  Array of surface roughness values in meters.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: A pivot table where rows correspond to slope bins, columns to roughness bins,\n                and values to the MAD of the elevation differences within each bin.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">delta_elevation</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty.interpolate_missing_values_with_nearest_neighbour", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "qualname": "interpolate_missing_values_with_nearest_neighbour", "kind": "function", "doc": "<p>Interpolate missing values in the binned median table using bilinear and\nnearest-neighbor interpolation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>binned_median_pivot (pd.DataFrame):</strong>  A pivot table of binned median absolute</li>\n<li>elevation differences.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n<li><strong>secondary_fill (bool):</strong>  perform a second fill</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: The pivot table with missing values interpolated.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">binned_median_pivot</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">secondary_fill</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty.get_binned_values", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "qualname": "get_binned_values", "kind": "function", "doc": "<p>Retrieve the median absolute elevation difference for arrays of slope and roughness values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slope_values (np.ndarray):</strong>  Array of slope values for which to retrieve median differences.</li>\n<li><strong>roughness_values (np.ndarray):</strong>  Array of roughness values for which to retrieve\nmedian differences.</li>\n<li><strong>binned_table (pd.DataFrame):</strong>  A pivot table of binned median absolute elevation differences.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: An array of median absolute elevation differences corresponding to the\n              input slope and roughness pairs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slope_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty.calc_2d_uncertainty_table", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "qualname": "calc_2d_uncertainty_table", "kind": "function", "doc": "<p>Main function to calculate the 2D uncertainty table with interpolated missing values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delta_elevation (np.ndarray):</strong>  Array of elevation differences between two\nmeasurement techniques.</li>\n<li><strong>slope (np.ndarray):</strong>  Array of surface slopes in meters.</li>\n<li><strong>roughness (np.ndarray):</strong>  Array of surface roughness values in meters.</li>\n<li><strong>method (str):</strong>  Method to calculate the uncertainty ('median' or 'mad'). Default is 'median'</li>\n<li><strong>fill (bool):</strong>  Whether to fill missing values using bilinear interpolation.</li>\n<li><strong>secondary_fill (bool):</strong>  Whether to use nearest neighbor fill if bilinear\ninterpolation leaves NaNs.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: A pivot table where rows correspond to slope bins, columns to roughness bins,\n                and values to the interpolated uncertainty metric within each bin.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">delta_elevation</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;median&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">secondary_fill</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty.save_table_as_pickle", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "qualname": "save_table_as_pickle", "kind": "function", "doc": "<p>Save the binned table as a Pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>binned_table (pd.DataFrame):</strong>  The binned median absolute elevation difference table.</li>\n<li><strong>filename (str):</strong>  The path to the file where the table will be saved.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty.load_table_from_pickle", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "qualname": "load_table_from_pickle", "kind": "function", "doc": "<p>Load the binned table from a Pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  The path to the file from which the table will be loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: The binned median absolute elevation difference table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty.main", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.cryotempo_2d_uncertainty", "qualname": "main", "kind": "function", "doc": "<p>main function for command line tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_2d_uncertainty_map", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_2d_uncertainty_map", "kind": "module", "doc": "<p>Plot an Antarctic or Greenland map of 2d uncertainty using the\n2d uncertainty LUT, slope and roughness, at a grid of lat/lon points</p>\n"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_2d_uncertainty_map.load_table_from_pickle", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_2d_uncertainty_map", "qualname": "load_table_from_pickle", "kind": "function", "doc": "<p>Load the binned table from a Pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  The path to the file from which the table will be loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: The binned median absolute elevation difference table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_2d_uncertainty_map.get_binned_values", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_2d_uncertainty_map", "qualname": "get_binned_values", "kind": "function", "doc": "<p>Retrieve the median absolute elevation difference for arrays of slope and roughness values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slope_values (np.ndarray):</strong>  Array of slope values for which to retrieve median differences.</li>\n<li><strong>roughness_values (np.ndarray):</strong>  Array of roughness values for which to retrieve\nmedian differences.</li>\n<li><strong>binned_table (pd.DataFrame):</strong>  A pivot table of binned median absolute elevation differences.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: An array of median absolute elevation differences corresponding to the input\n              slope and roughness pairs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slope_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_2d_uncertainty_map.main", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_2d_uncertainty_map", "qualname": "main", "kind": "function", "doc": "<p>main function for tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_table", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_table", "kind": "module", "doc": "<p>plot_table.py</p>\n"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_table.load_table_from_pickle", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_table", "qualname": "load_table_from_pickle", "kind": "function", "doc": "<p>Load the binned table from a Pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  The path to the file from which the table will be loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: The binned median absolute elevation difference table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_table.plot_binned_table", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_table", "qualname": "plot_binned_table", "kind": "function", "doc": "<p>Plot the binned median absolute elevation difference table as a heatmap with optional\nsmoothing,\ncorrectly oriented axis labels, restricted elevation difference range, an over color, and\na colorbar with an arrow indicating the over color.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>binned_table (pd.DataFrame):</strong>  The binned median absolute elevation difference table.</li>\n<li><strong>smooth (bool):</strong>  Whether to apply Gaussian smoothing to the table. Defaults to False.</li>\n<li><strong>sigma (float):</strong>  The standard deviation for the Gaussian kernel.</li>\n<li>Larger values result in more smoothing. Defaults to 1.0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">smooth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_table.main", "modulename": "clev2er.utils.uncertainty.uncertainty_preprocessing.plot_table", "qualname": "main", "kind": "function", "doc": "<p>main function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.xml", "modulename": "clev2er.utils.xml", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.xml.tests", "modulename": "clev2er.utils.xml.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.xml.tests.test_xml_funcs", "modulename": "clev2er.utils.xml.tests.test_xml_funcs", "kind": "module", "doc": "<p>test of xml_funcs.py functions</p>\n"}, {"fullname": "clev2er.utils.xml.tests.test_xml_funcs.test_set_xml_dict_types", "modulename": "clev2er.utils.xml.tests.test_xml_funcs", "qualname": "test_set_xml_dict_types", "kind": "function", "doc": "<p>test of set_xml_dict_types</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.xml.xml_funcs", "modulename": "clev2er.utils.xml.xml_funcs", "kind": "module", "doc": "<p>xml processing functions</p>\n"}, {"fullname": "clev2er.utils.xml.xml_funcs.replace_env_variables", "modulename": "clev2er.utils.xml.xml_funcs", "qualname": "replace_env_variables", "kind": "function", "doc": "<p>replace environment variables in str</p>\n\n<p>copes with $SOME_ENV and ${SOME_ENV} in str</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>input_str (str):</strong>  input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: string with env vars replaced</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.xml.xml_funcs.set_xml_dict_types", "modulename": "clev2er.utils.xml.xml_funcs", "qualname": "set_xml_dict_types", "kind": "function", "doc": "<p>convert string values to bool, int, float in a dict parsed from xml</p>\n\n<p>xmltodict.parse(xml) creates a dictionary from the XML file\nbut it stores all dict values as type str</p>\n\n<h6 id=\"this-function-checks-each-string-and-converts-to\">This function checks each string and converts to :</h6>\n\n<blockquote>\n  <p>bool : if str == 'false' (any case) == 'true (any case)\n  int : if int(str) is valid\n  float : if float(str) is valid</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  dictionary previously parsed by xmltodict</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();